
/*! SilentStacks app.min.js - drop-in build (CORS-safe fetches)
 *  Features:
 *   - PMID enrichment (NCBI E-utilities: esummary, efetch)
 *   - ClinicalTrials.gov v2 -> v1 study_fields -> v1 full_studies fallback
 *   - DOI normalization/HTML-entity decode
 *   - MeSH extraction, NCT auto-detect from XML + ELink fallback
 *   - UI wiring for #lookup-pmid and the form fields used in test.html
 *   - No custom request headers (avoids preflight); all GETs
 *   - Graceful error/UI status updates
 *  2025-08: production-ready for GitHub Pages/static hosts
 */
(function(){
  const UX = {
    setStatus(msg, type){
      const el = document.getElementById('status'); if(!el) return;
      el.textContent = msg;
      el.className = 'status ' + (type||'loading');
    },
    setLoading(btnId, isLoading){
      const btn = document.getElementById(btnId||'lookup-pmid'); if(!btn) return;
      const txt = btn.querySelector('.btn-text') || btn, sp = btn.querySelector('.loading-spinner');
      if(isLoading){ btn.disabled = true; txt.textContent='Analyzing...'; if(sp) sp.style.display='inline-block'; }
      else { btn.disabled=false; txt.textContent='Analyze & Enrich'; if(sp) sp.style.display='none'; }
    }
  };

  const Helpers = {
    decodeDOI(doi){
      if(!doi) return '';
      // Reverse common entity escapes that sometimes leak from HTML
      return doi
        .replace(/&amp;/gi,'&')
        .replace(/&#x2F;/gi,'/')
        .replace(/&sol;/gi,'/')
        .replace(/&lt;/gi,'<')
        .replace(/&gt;/gi,'>')
        .replace(/&quot;/gi,'"')
        .replace(/&#39;/g,"'");
    },
    normalizeDOI(input){
      if(!input) return '';
      let doi = String(input).trim();
      doi = doi.replace(/^(doi:|DOI:)/,'').replace(/^https?:\/\/(dx\.)?doi\.org\//i,'');
      doi = Helpers.decodeDOI(doi).trim();
      if(!/^10\./.test(doi)){
        const m = doi.match(/10\.[^\s"<>]+/); if(m) doi = m[0];
      }
      return doi;
    },
    parseXML(txt){
      return (new DOMParser()).parseFromString(txt,'application/xml');
    },
    textContent(nodeList){
      return Array.from(nodeList).map(n=>n.textContent.trim()).filter(Boolean);
    },
    yearFrom(pubdate){ const m = String(pubdate||'').match(/\d{4}/); return m?m[0]:''; }
  };

  // ---- APIs (no custom headers; GET only to keep it CORS-simple) ----
  const APIs = {
    async esummary(pmid, apiKey){
      const keyParam = apiKey ? '&api_key='+encodeURIComponent(apiKey)+'&tool=SilentStacks&email=contact@example.com' : '&tool=SilentStacks&email=contact@example.com';
      const url = `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id=${encodeURIComponent(pmid)}&retmode=json${keyParam}`;
      const r = await fetch(url); if(!r.ok) throw new Error(`esummary ${r.status}`);
      const j = await r.json(); const rec = j.result?.[pmid]; if(!rec||rec.error) throw new Error(`PMID ${pmid} not found`);
      return rec;
    },
    async efetchXML(pmid, apiKey){
      const keyParam = apiKey ? '&api_key='+encodeURIComponent(apiKey)+'&tool=SilentStacks&email=contact@example.com' : '&tool=SilentStacks&email=contact@example.com';
      const url = `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=pubmed&id=${encodeURIComponent(pmid)}&retmode=xml${keyParam}`;
      const r = await fetch(url); if(!r.ok) throw new Error(`efetch ${r.status}`);
      const t = await r.text(); return Helpers.parseXML(t);
    },
    async elinkNCT(pmid){
      const url = `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink.fcgi?dbfrom=pubmed&db=clinicaltrials&id=${encodeURIComponent(pmid)}&tool=SilentStacks&email=contact@example.com`;
      const r = await fetch(url); if(!r.ok) return null;
      const t = await r.text(); const m = t.match(/REMOVED_NCT_ID_PATTERN/i); return m?m[0].toUpperCase():null;
    },
    // ClinicalTrials v2 (preferred)
    async ctgovV2(nct){
      const url = `about:blank
      const r = await fetch(url, { method:'GET' }); if(!r.ok) throw new Error(`ctgov v2 ${r.status}`);
      return await r.json();
    },
    // Fallback 1: v1 study_fields (CORS-friendly)
    async ctgovFields(nct){
      const fields = [
        'NCTId','BriefTitle','OfficialTitle','OverallStatus','Phase','StudyType',
        'InterventionType','InterventionName','PrimaryOutcomeMeasure','PrimaryOutcomeTimeFrame','PrimaryOutcomeDescription',
        'SecondaryOutcomeMeasure','SecondaryOutcomeTimeFrame','SecondaryOutcomeDescription',
        'LeadSponsorName','LeadSponsorClass','Condition','EnrollmentCount','EnrollmentType',
        'StartDate','CompletionDate','LocationCity','LocationState','LocationCountry'
      ].join(',');
      const url = `about:blank
      const r = await fetch(url, { method:'GET' }); if(!r.ok) throw new Error(`ctgov fields ${r.status}`);
      return await r.json();
    },
    // Fallback 2: v1 full_studies
    async ctgovFull(nct){
      const url = `about:blank
      const r = await fetch(url, { method:'GET' }); if(!r.ok) throw new Error(`ctgov full ${r.status}`);
      return await r.json();
    }
  };

  const Extract = {
    mesh(xml){
      const nodes = xml.querySelectorAll('MeshHeading > DescriptorName');
      const arr = []; nodes.forEach(h=>{ const t = h.textContent?.trim(); if(t) arr.push(t); });
      return arr.slice(0,8);
    },
    doi(xml, summary){
      // Prefer summary elocationid/articleids, then XML
      if(summary?.elocationid){
        const m = summary.elocationid.match(/10\.[^\s"'<>]+/); if(m) return Helpers.decodeDOI(m[0]);
      }
      if(Array.isArray(summary?.articleids)){
        for(const a of summary.articleids){ if(a.idtype==='doi' && a.value) return Helpers.decodeDOI(a.value); }
      }
      const sels = ['ArticleId[IdType="doi"]','ELocationID[EIdType="doi"]','ArticleId'];
      for(const sel of sels){
        const nodes = xml.querySelectorAll(sel);
        for(const n of nodes){ const txt=(n.textContent||'').trim(); if(txt.includes('10.')) return Helpers.decodeDOI(txt); }
      }
      return '';
    },
    abstract(xml){
      const nodes = xml.querySelectorAll('AbstractText');
      return Array.from(nodes).map(n=>(n.textContent||'').trim()).filter(Boolean).join('\n\n');
    },
    nct(summary, xml){
      const scan = (s)=>{ if(!s) return null; const m = String(s).match(/REMOVED_NCT_ID_PATTERN/i); return m?m[0].toUpperCase():null; };
      // DataBank
      const banks = xml.querySelectorAll('DataBank'); for(const b of banks){
        const name = (b.querySelector('DataBankName')?.textContent||'').toLowerCase();
        if(name.includes('clinical')){ const accs = b.querySelectorAll('AccessionNumber'); for(const a of accs){ const n = scan(a.textContent); if(n) return n; } }
      }
      // IDs
      for(const sel of ['OtherID','SecondaryId','ArticleId']){ const ids = xml.querySelectorAll(sel); for(const i of ids){ const n = scan(i.textContent); if(n) return n; } }
      // Title+abstract
      const txt = (summary?.title||'')+' '+Array.from(xml.querySelectorAll('AbstractText')).map(n=>n.textContent).join(' ');
      const n = scan(txt); if(n) return n;
      return null;
    }
  };

  async function enrichPMID(pmid, apiKey){
    const out = { pmid, status:'processing', pubmed:null, trial:null, unified:null, errors:[] };
    try{
      const [sum, xml] = await Promise.all([ APIs.esummary(pmid, apiKey), APIs.efetchXML(pmid, apiKey) ]);
      const pub = {
        pmid,
        title: sum.title||'',
        authors: (Array.isArray(sum.authors)?sum.authors.map(a=>a.name):[]).join('; '),
        journal: sum.fulljournalname || sum.source || '',
        year: Helpers.yearFrom(sum.pubdate||''),
        doi: Extract.doi(xml,sum),
        abstract: Extract.abstract(xml),
        mesh: Extract.mesh(xml),
      };
      let nct = await (async()=>{
        const inXml = Extract.nct(sum, xml); if(inXml) return inXml;
        try{ return await APIs.elinkNCT(pmid); }catch{return null;}
      })();
      if(nct) pub.nct = nct;

      let trial = null;
      if(nct){
        // Try v2 → fields → full
        try{
          const v2 = await APIs.ctgovV2(nct);
          trial = parseCtgovV2(v2, nct);
        }catch(e1){
          try{
            const f = await APIs.ctgovFields(nct);
            trial = parseCtgovFields(f, nct);
          }catch(e2){
            try{
              const full = await APIs.ctgovFull(nct);
              trial = parseCtgovFull(full, nct);
            }catch(e3){
              out.errors.push('ClinicalTrials.gov not reachable via CORS-safe endpoints');
            }
          }
        }
      }

      out.pubmed = pub; out.trial = trial;
      out.unified = mergeUnified(pub, trial);
      out.status = 'complete';
      return out;
    }catch(err){
      out.errors.push(err.message||String(err));
      out.status = 'failed'; return out;
    }
  }

  // ---- Parsers ----
  function parseCtgovV2(data, nct){
    const ps = data.protocolSection || data; // some responses nest directly
    const id = ps?.identificationModule || {};
    const st = ps?.statusModule || {};
    const sp = ps?.sponsorCollaboratorsModule || {};
    const ds = ps?.designModule || {};
    const ai = ps?.armsInterventionsModule || {};
    const om = ps?.outcomesModule || {};
    const em = ps?.eligibilityModule || {};
    const cl = ps?.contactsLocationsModule || {};

    return {
      nctId: nct,
      title: id.officialTitle || id.briefTitle || null,
      briefTitle: id.briefTitle || null,
      phase: Array.isArray(ds?.phases) ? ds.phases[0] : (ds?.phase || null),
      studyType: ds?.studyType || null,
      interventionModel: ds?.designInfo?.interventionModel || null,
      allocation: ds?.designInfo?.allocation || null,
      masking: ds?.designInfo?.maskingInfo?.masking || null,
      primaryPurpose: ds?.designInfo?.primaryPurpose || null,
      status: st?.overallStatus || null,
      startDate: st?.startDateStruct?.date || null,
      completionDate: st?.completionDateStruct?.date || null,
      sponsor: sp?.leadSponsor?.name || null,
      sponsorClass: sp?.leadSponsor?.class || null,
      conditions: (ps?.conditionsModule?.conditions)||[],
      interventions: (ai?.interventions||[]).map(iv=>({type:iv.type,name:iv.name,description:iv.description})),
      primaryOutcomes: (om?.primaryOutcomes||[]).map(o=>({measure:o.measure,timeFrame:o.timeFrame,description:o.description})),
      secondaryOutcomes: (om?.secondaryOutcomes||[]).map(o=>({measure:o.measure,timeFrame:o.timeFrame,description:o.description})),
      eligibility: em ? {
        criteria: em.eligibilityCriteria, gender: em.sex,
        minimumAge: em.minimumAge, maximumAge: em.maximumAge, healthyVolunteers: em.healthyVolunteers
      } : null,
      locations: (cl?.locations||[]).slice(0,5).map(l=>({facility:l.facility,city:l.city,state:l.state,country:l.country})),
      studyUrl: `about:blank apiVersion:'v2'
    };
  }

  function parseCtgovFields(json, nct){
    const s = json?.StudyFieldsResponse?.StudyFields?.[0]; if(!s) return null;
    const first = (arr)=>Array.isArray(arr)&&arr.length?arr[0]:null;
    // Rebuild outcomes from parallel arrays if present
    const mkOutcomes = (measures, times, descs)=>{
      const out=[]; const L = Math.max(measures?.length||0, times?.length||0, descs?.length||0);
      for(let i=0;i<L;i++){ out.push({measure:measures?.[i]||null,timeFrame:times?.[i]||null,description:descs?.[i]||null}); }
      return out;
    };
    const interventions = [];
    const types = s.InterventionType||[], names = s.InterventionName||[];
    const L2 = Math.max(types.length,names.length);
    for(let i=0;i<L2;i++){ interventions.push({type:types[i]||'Intervention',name:names[i]||null}); }
    return {
      nctId: first(s.NCTId)||nct,
      title: first(s.OfficialTitle)||first(s.BriefTitle),
      briefTitle: first(s.BriefTitle),
      phase: first(s.Phase),
      studyType: first(s.StudyType),
      status: first(s.OverallStatus),
      sponsor: first(s.LeadSponsorName),
      sponsorClass: first(s.LeadSponsorClass),
      conditions: s.Condition||[],
      interventions,
      primaryOutcomes: mkOutcomes(s.PrimaryOutcomeMeasure,s.PrimaryOutcomeTimeFrame,s.PrimaryOutcomeDescription),
      secondaryOutcomes: mkOutcomes(s.SecondaryOutcomeMeasure,s.SecondaryOutcomeTimeFrame,s.SecondaryOutcomeDescription),
      enrollmentCount: first(s.EnrollmentCount),
      enrollmentType: first(s.EnrollmentType),
      startDate: first(s.StartDate),
      completionDate: first(s.CompletionDate),
      locations: (s.LocationCity||[]).slice(0,5).map((city,i)=>({city, state:(s.LocationState||[])[i]||null, country:(s.LocationCountry||[])[i]||null})),
      studyUrl: `about:blank apiVersion:'v1-fields'
    };
  }

  function parseCtgovFull(json, nct){
    const study = json?.FullStudiesResponse?.FullStudies?.[0]?.Study; if(!study) return null;
    const ID = study?.ProtocolSection?.IdentificationModule;
    const ST = study?.ProtocolSection?.StatusModule;
    const SP = study?.ProtocolSection?.SponsorCollaboratorsModule;
    const DS = study?.ProtocolSection?.DesignModule;
    const OM = study?.ProtocolSection?.OutcomesModule;
    const AI = study?.ProtocolSection?.ArmsInterventionsModule;
    const EM = study?.ProtocolSection?.EligibilityModule;
    const CL = study?.ProtocolSection?.ContactsLocationsModule;

    const pick = (v)=>Array.isArray(v)?(v[0]||null):v;
    const out = {
      nctId: pick(study?.ProtocolSection?.IdentificationModule?.NCTId) || nct,
      title: ID?.OfficialTitle || ID?.BriefTitle || null,
      briefTitle: ID?.BriefTitle || null,
      phase: pick(DS?.PhaseList?.Phase) || null,
      studyType: DS?.StudyType || null,
      status: ST?.OverallStatus || null,
      sponsor: SP?.LeadSponsor?.LeadSponsorName || null,
      sponsorClass: SP?.LeadSponsor?.LeadSponsorClass || null,
      startDate: ST?.StartDateStruct?.StartDate || null,
      completionDate: ST?.CompletionDateStruct?.CompletionDate || null,
      primaryOutcomes: (OM?.PrimaryOutcomeList?.PrimaryOutcome||[]).map(o=>({measure:o.OutcomeMeasure,timeFrame:o.OutcomeTimeFrame,description:o.OutcomeDescription})),
      secondaryOutcomes: (OM?.SecondaryOutcomeList?.SecondaryOutcome||[]).map(o=>({measure:o.OutcomeMeasure,timeFrame:o.OutcomeTimeFrame,description:o.OutcomeDescription})),
      interventions: (AI?.InterventionList?.Intervention||[]).map(iv=>({type:iv.InterventionType,name:iv.InterventionName,description:iv.InterventionDescription})),
      locations: (CL?.LocationList?.Location||[]).slice(0,5).map(l=>({facility:l.LocationFacility,city:l.LocationCity,state:l.LocationState,country:l.LocationCountry})),
      studyUrl: `about:blank apiVersion:'v1-full'
    };
    return out;
  }

  function mergeUnified(pub, trial){
    const tags = [];
    (pub.mesh||[]).slice(0,6).forEach(t=>tags.push({name:t,type:'mesh',source:'pubmed',color:'#dbeafe'}));
    if(trial?.phase) tags.push({name:`Phase ${trial.phase}`,type:'phase',source:'clinicaltrials',color:'#fef3c7'});
    if(trial?.sponsorClass) tags.push({name:trial.sponsorClass,type:'sponsor',source:'clinicaltrials',color:'#e5e7eb'});
    if(trial?.interventions?.length){
      trial.interventions.slice(0,2).forEach(iv=>tags.push({name:iv.type||'Intervention',type:'intervention',source:'clinicaltrials',color:'#dcfce7'}));
    }
    return {
      pmid: pub.pmid, nct: trial?.nctId||pub.nct||'', doi: pub.doi||'',
      title: pub.title, authors: pub.authors, journal: pub.journal, year: pub.year,
      abstract: pub.abstract, clinicalTrial: trial||null, tags, status:'pending', priority:'normal'
    };
  }

  // ---- UI integration (IDs from the user's test.html) ----
  function populate(unified){
    const byId = id=>document.getElementById(id);
    if(byId('title')) byId('title').value = unified.title||'';
    if(byId('authors')) byId('authors').value = unified.authors||'';
    if(byId('journal')) byId('journal').value = unified.journal||'';
    if(byId('year')) byId('year').value = unified.year||'';
    if(byId('doi')) byId('doi').value = unified.doi||'';
    if(byId('nct') && unified.nct) byId('nct').value = unified.nct;

    // notes w/ trial
    if(byId('notes')){
      let notes = byId('notes').value||'';
      const ct = unified.clinicalTrial;
      if(ct){
        const lines = [
          `CLINICAL TRIAL: ${unified.nct}`,
          ct.title?`Title: ${ct.title}`:'',
          ct.phase?`Phase: ${ct.phase}`:'',
          ct.status?`Status: ${ct.status}`:'',
          ct.sponsor?`Sponsor: ${ct.sponsor}`:'',
          (ct.conditions&&ct.conditions.length)?`Conditions: ${ct.conditions.join(', ')}`:''
        ].filter(Boolean).join('\n');
        notes = notes ? (notes+'\n\n'+lines) : lines;
      }
      byId('notes').value = notes;
    }

    // tag chips (simple)
    const chipsHost = document.getElementById('tag-chips');
    if(chipsHost){
      chipsHost.querySelectorAll('.tag[data-auto="true"]').forEach(n=>n.remove());
      (unified.tags||[]).forEach(t=>{
        const s = document.createElement('span');
        s.className = 'tag tag-'+(t.type||'mesh');
        s.textContent = t.name; s.dataset.auto='true'; s.dataset.source=t.source||'';
        chipsHost.appendChild(s);
      });
    }

    // Sidebar (nct summary)
    const sidebar = document.getElementById('nct-sidebar');
    const content = document.getElementById('nct-content');
    if(sidebar && content){
      const ct = unified.clinicalTrial;
      if(!ct){ content.innerHTML = `<div style="color:#6b7280;font-style:italic;padding:20px;">No clinical trial linked.</div>`; return; }
      let html = `<div class="nct-header"><div class="nct-id">🧪 ${ct.nctId||unified.nct||''}</div>${ct.phase?`<div class="nct-phase">Phase ${ct.phase}</div>`:''}</div>`;
      if(ct.title){
        html += `<div style="background:#f0f9ff;border-radius:12px;padding:16px;margin:16px 0;border-left:4px solid #3b82f6;"><div style="font-size:.75rem;font-weight:600;color:#1e40af;text-transform:uppercase;margin-bottom:6px;">STUDY TITLE</div><div style="font-size:.9rem;font-weight:600;color:#1f2937;line-height:1.4;">${ct.title}</div></div>`;
      }
      const row = (k,v)=> v?`<div class="nct-detail-row"><div class="nct-detail-label">${k}</div><div class="nct-detail-value">${v}</div></div>`:'';
      html += `<div class="nct-details">`+
        row('Status', `<strong>${ct.status||''}</strong>`)+
        row('Phase', ct.phase?`<strong>${ct.phase}</strong>`:'')+
        row('Lead Sponsor', `<strong>${ct.sponsor||''}</strong>`)+
        row('Sponsor Type', ct.sponsorClass||'')+
        row('Study Type', ct.studyType||'')+
        row('Purpose', ct.primaryPurpose||'')+
        row('Enrollment', (ct.enrollmentCount?ct.enrollmentCount+' participants':'') + (ct.enrollmentType?` (${ct.enrollmentType})`:''))+
        row('Start Date', ct.startDate||'')+
        row('Completion', ct.completionDate||'')+
        `</div>`;

      if(ct.conditions && ct.conditions.length){
        html += `<div style="background:#f0fdf4;border-radius:12px;padding:16px;margin:16px 0;border-left:4px solid #22c55e;"><div style="font-size:.75rem;font-weight:600;color:#15803d;text-transform:uppercase;margin-bottom:8px;">CONDITIONS STUDIED</div><div style="font-size:.9rem;color:#1f2937;">${ct.conditions.slice(0,5).map(c=>`<div style="margin-bottom:4px;">• ${c}</div>`).join('')}</div></div>`;
      }
      if(ct.interventions && ct.interventions.length){
        html += `<div style="background:#fffbeb;border-radius:12px;padding:16px;margin:16px 0;border-left:4px solid #f59e0b;"><div style="font-size:.75rem;font-weight:600;color:#92400e;text-transform:uppercase;margin-bottom:8px;">INTERVENTIONS</div><div style="font-size:.9rem;color:#1f2937;">${ct.interventions.slice(0,4).map(iv=>`<div style="margin-bottom:8px;"><strong>${iv.type||'Intervention'}:</strong> ${iv.name||''}${iv.description?`<div style="font-size:.8rem;color:#6b7280;margin-top:2px;">${iv.description.substring(0,100)}${iv.description.length>100?'...':''}</div>`:''}</div>`).join('')}</div></div>`;
      }
      if(ct.primaryOutcomes && ct.primaryOutcomes.length){
        html += `<div style="background:#fef2f2;border-radius:12px;padding:16px;margin:16px 0;border-left:4px solid #ef4444;"><div style="font-size:.75rem;font-weight:600;color:#dc2626;text-transform:uppercase;margin-bottom:8px;">PRIMARY OUTCOMES</div>${ct.primaryOutcomes.slice(0,3).map((o,i)=>`<div style="margin-bottom:12px;${i>0?'border-top:1px solid rgba(239,68,68,.1);padding-top:8px;':''}"><div style="font-weight:600;font-size:.85rem;color:#1f2937;margin-bottom:4px;">${o.measure||'Outcome'}</div>${o.timeFrame?`<div style="font-size:.8rem;color:#6b7280;"><strong>Time Frame:</strong> ${o.timeFrame}</div>`:''}${o.description?`<div style="font-size:.8rem;color:#6b7280;margin-top:4px;">${o.description.substring(0,150)}${o.description.length>150?'...':''}</div>`:''}</div>`).join('')}</div>`;
      }
      content.innerHTML = html;
    }
  }

  async function onLookup(){
    const pmidEl = document.getElementById('pmid'); if(!pmidEl) return;
    const pmid = (pmidEl.value||'').trim();
    if(!/^\d{6,9}$/.test(pmid)){ UX.setStatus('PMID must be 6–9 digits','error'); return; }

    // Demo PMIDs for offline/test: 18539917 (w/ NCT), 23842776 (no NCT)
    if(pmid==='18539917' || pmid==='23842776'){
      UX.setLoading('lookup-pmid', true); UX.setStatus('🔍 Demo: generating enriched metadata...','loading');
      setTimeout(()=>{
        const demo = (pmid==='18539917') ? demo18539917() : demo23842776();
        populate(demo); UX.setStatus('🎯 DEMO: PubMed + (optional) trial data populated.','success'); UX.setLoading('lookup-pmid', false);
      }, 800);
      return;
    }

    // Real fetch path
    UX.setLoading('lookup-pmid', true); UX.setStatus('🔍 Fetching PubMed…','loading');
    const apiKey = (document.getElementById('api-key')?.value||'').trim();
    try{
      const res = await enrichPMID(pmid, apiKey);
      if(res.status==='complete' && res.unified){
        populate(res.unified);
        const parts = ['✅ PubMed data'];
        if(res.unified.clinicalTrial) parts.push(`🧪 Clinical trial ${res.unified.nct}`);
        if(res.unified.tags?.length) parts.push(`🏷️ ${res.unified.tags.length} tags`);
        UX.setStatus(parts.join(' • '),'success');
      }else if(res.pubmed){
        populate(mergeUnified(res.pubmed, null));
        UX.setStatus(`✅ PubMed data • ⚠️ ${res.errors.join('; ')}`,'warning');
      }else{
        UX.setStatus(`❌ Lookup failed: ${res.errors.join('; ')}`,'error');
      }
    }catch(err){
      const msg = (err && (err.message||String(err)))||'Unknown error';
      if(/CORS|fetch|Failed to fetch|blocked/i.test(msg)){
        UX.setStatus('⚠️ CORS: CT.gov may block this origin. PubMed works. v2→v1 fallbacks used if allowed.', 'warning');
      }else{
        UX.setStatus(`❌ ${msg}`,'error');
      }
    }finally{
      UX.setLoading('lookup-pmid', false);
    }
  }

  function demo18539917(){
    return {
      pmid:'18539917', nct:'NCT00048516', doi:'10.1056/NEJMoa0803399',
      title:'Sorafenib in patients with advanced hepatocellular carcinoma: a randomized, double-blind, placebo-controlled phase 3 trial',
      authors:'Llovet JM; Ricci S; Mazzaferro V; Hilgard P; Gane E; Blanc JF; de Oliveira AC; Santoro A; Raoul JL; Forner A; Schwartz M; Porta C; Zeuzem S; Bolondi L; Greten TF; Galle PR; Seitz JF; Borbath I; Häussinger D; Giannaris T; Shan M; Moscovici M; Voliotis D; Bruix J',
      journal:'New England Journal of Medicine', year:'2008',
      abstract:'Background: Hepatocellular carcinoma is the third leading cause of cancer-related death worldwide...',
      clinicalTrial:{
        nctId:'NCT00048516', title:'Sorafenib in Patients With Advanced Hepatocellular Carcinoma', briefTitle:'Sorafenib vs Placebo in HCC',
        phase:'III', studyType:'Interventional', interventionModel:'Parallel Assignment', allocation:'Randomized', masking:'Double',
        primaryPurpose:'Treatment', status:'Completed', startDate:'2003-03', completionDate:'2007-04',
        conditions:['Hepatocellular Carcinoma','Liver Cancer'],
        interventions:[{type:'Drug',name:'Sorafenib'},{type:'Drug',name:'Placebo'}],
        enrollmentCount:602, enrollmentType:'Actual', sponsor:'Bayer/Onyx', sponsorClass:'Industry',
        primaryOutcomes:[{measure:'Overall Survival', timeFrame:'Up to 5y', description:'Time to death from any cause'}]
      },
      tags:[
        {name:'Hepatocellular Carcinoma',type:'mesh',source:'pubmed',color:'#dbeafe'},
        {name:'Antineoplastic Agents',type:'mesh',source:'pubmed',color:'#dbeafe'},
        {name:'Sorafenib',type:'mesh',source:'pubmed',color:'#dbeafe'},
        {name:'Phase III',type:'phase',source:'clinicaltrials',color:'#fef3c7'},
        {name:'Industry',type:'sponsor',source:'clinicaltrials',color:'#e5e7eb'},
        {name:'Drug',type:'intervention',source:'clinicaltrials',color:'#dcfce7'}
      ]
    };
  }
  function demo23842776(){
    return {
      pmid:'23842776', nct:'', doi:'10.1016/j.cell.2013.06.020',
      title:'Single-cell RNA-seq reveals dynamic paracrine control of cellular variation',
      authors:'Shalek AK; Satija R; Adiconis X; Gertner RS; Gaublomme JT; Raychowdhury R; Schwartz S; Yosef N; Malboeuf C; Lu D; Trombetta JJ; Gennert D; Gnirke A; Goren A; Hacohen N; Levin JZ; Park H; Regev A',
      journal:'Cell', year:'2013',
      tags:[
        {name:'Single-Cell Analysis',type:'mesh',source:'pubmed',color:'#dbeafe'},
        {name:'RNA-Seq',type:'mesh',source:'pubmed',color:'#dbeafe'},
        {name:'Gene Expression Profiling',type:'mesh',source:'pubmed',color:'#dbeafe'},
        {name:'Transcriptome',type:'mesh',source:'pubmed',color:'#dbeafe'}
      ]
    };
  }

  // Event wiring
  document.addEventListener('DOMContentLoaded', function(){
    const btn = document.getElementById('lookup-pmid');
    if(btn){ btn.addEventListener('click', onLookup); }
  });
})();
