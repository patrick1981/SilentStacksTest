<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SilentStacks v2.0 - ILL Management System</title>
    
    <!-- Self-hosted libraries for offline-first -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/fuse.js/6.6.2/fuse.min.js"></script>
    
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Reddit+Sans:ital,wght@0,200..900;1,200..900&display=swap');
        
        :root {
            --reddit-sans: 'Reddit Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            --primary: #333;
            --light-gray: #666;
            --border-gray: #ccc;
            --bg-white: #fff;
            --bg-light: #f9f9f9;
            --success: #10b981;
            --error: #ef4444;
            --warning: #f59e0b;
            --transition: all 0.2s ease;
        }
        
        /* Dark Theme */
        [data-theme="dark"] {
            --primary: #f8fafc;
            --light-gray: #cbd5e1;
            --border-gray: #475569;
            --bg-white: #1e293b;
            --bg-light: #0f172a;
        }
        
        /* High Contrast Theme */
        [data-theme="high-contrast"] {
            --primary: #000000;
            --light-gray: #000000;
            --border-gray: #000000;
            --bg-white: #ffffff;
            --bg-light: #f0f0f0;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: var(--reddit-sans);
            background: var(--bg-light);
            color: var(--primary);
            line-height: 1.6;
        }
        
        .app-container {
            display: flex;
            min-height: 100vh;
        }
        
        /* Sidebar - Pinned and Always Visible */
        .sidebar {
            width: 260px;
            background: var(--bg-white);
            border-right: 1px solid var(--border-gray);
            display: flex;
            flex-direction: column;
            position: fixed;
            height: 100vh;
            top: 0;
            left: 0;
            z-index: 100;
            transform: translateX(-100%);
            transition: var(--transition);
        }
        
        .sidebar.open {
            transform: translateX(0);
        }
        
        @media (min-width: 1024px) {
            .sidebar {
                position: fixed;
                transform: translateX(0);
            // Data validation
            document.getElementById('validateData')?.addEventListener('click', function() {
                const issues = validateDataQuality();
                showDataQualityReport(issues);
            });

            // Print functionality
            document.getElementById('printRequests')?.addEventListener('click', function() {
                const printWindow = window.open('', '_blank');
                const printContent = `
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>SilentStacks Requests Report</title>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            h1 { color: #333; }
                            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f2f2f2; }
                            .status-badge { padding: 2px 6px; border-radius: 3px; font-size: 0.8em; }
                            .order { background: #fffbeb; color: #92400e; }
                            .received { background: #eff6ff; color: #1e40af; }
                            .processing { background: #fef3c7; color: #d97706; }
                            .completed { background: #f0fdf4; color: #166534; }
                            .cancelled { background: #fef2f2; color: #991b1b; }
                        </style>
                    </head>
                    <body>
                        <h1>SilentStacks Requests Report</h1>
                        <p>Generated: ${new Date().toLocaleString()}</p>
                        <p>Total Requests: ${APP_STATE.requests.length}</p>
                        <table>
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Title</th>
                                    <th>Authors</th>
                                    <th>Journal</th>
                                    <th>Year</th>
                                    <th>Patron</th>
                                    <th>Status</th>
                                    <th>Priority</th>
                                    <th>Created</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${APP_STATE.requests.map(req => `
                                    <tr>
                                        <td>${req.id || ''}</td>
                                        <td>${req.title || 'Untitled'}</td>
                                        <td>${req.authors || ''}</td>
                                        <td>${req.journal || ''}</td>
                                        <td>${req.year || ''}</td>
                                        <td>${req.patronEmail || ''}</td>
                                        <td><span class="status-badge ${req.status || 'order'}">${req.status || 'order'}</span></td>
                                        <td>${req.priority || 'normal'}</td>
                                        <td>${new Date(req.created).toLocaleDateString()}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </body>
                    </html>
                `;
                printWindow.document.write(printContent);
                printWindow.document.close();
                printWindow.print();
                announceToScreenReader('Print dialog opened');
            });
            
            .main-content {
                margin-left: 260px;
            }
        }
        
        .sidebar-header {
            padding: 24px;
            border-bottom: 1px solid var(--border-gray);
        }
        
        .logo-text {
            font-size: 1.5rem;
            font-weight: 500;
            color: var(--primary);
        }
        
        .nav-tabs {
            flex: 1;
            padding: 16px 0;
        }
        
        .nav-tab {
            display: block;
            padding: 12px 24px;
            color: var(--light-gray);
            text-decoration: none;
            transition: var(--transition);
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
            font-family: inherit;
            font-size: 0.95rem;
        }
        
        .nav-tab:hover {
            background: var(--bg-light);
            color: var(--primary);
        }
        
        .nav-tab.active {
            background: var(--primary);
            color: white;
        }
        
        .sidebar-footer {
            padding: 16px 24px;
            border-top: 1px solid var(--border-gray);
            font-size: 0.85rem;
            color: var(--light-gray);
        }
        
        /* Mobile Nav Toggle */
        .nav-toggle {
            display: block;
            position: fixed;
            top: 16px;
            left: 16px;
            z-index: 200;
            background: var(--bg-white);
            border: 1px solid var(--border-gray);
            padding: 8px;
            cursor: pointer;
        }
        
        @media (min-width: 1024px) {
            .nav-toggle {
                display: none;
            }
        }
        
        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 0;
            transition: var(--transition);
        }
        
        @media (min-width: 1024px) {
            .main-content {
                margin-left: 260px;
            }
        }
        
        .content-header {
            background: var(--bg-white);
            border-bottom: 1px solid var(--border-gray);
            padding: 24px 32px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 16px;
        }
        
        .page-title {
            font-size: 1.5rem;
            font-weight: 500;
            color: var(--primary);
        }
        
        .content-actions {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .content-body {
            padding: 32px;
            max-width: 1200px;
        }
        
        /* Clean Form Styling - Inspired by inspiration.html */
        .form-container {
            background: var(--bg-white);
            padding: 32px;
            margin-bottom: 24px;
        }
        
        .form-section {
            margin-bottom: 32px;
        }
        
        .form-section h2 {
            font-size: 1.2rem;
            font-weight: 500;
            margin-bottom: 24px;
            color: var(--primary);
        }
        
        .form-group {
            margin-bottom: 24px;
            position: relative;
        }
        
        .form-group label {
            display: block;
            font-size: 0.9rem;
            color: var(--light-gray);
            margin-bottom: 8px;
            font-weight: 400;
        }
        
        /* Core Input Style - Matching inspiration.html */
        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            border: none;
            border-bottom: 1px solid var(--border-gray);
            background: transparent;
            padding: 12px 0;
            font-size: 1.1rem;
            color: var(--primary);
            font-family: var(--reddit-sans);
            transition: var(--transition);
            outline: none;
        }
        
        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            border-bottom: 2px solid var(--primary);
        }
        
        /* Validation states */
        .form-group input.valid {
            border-bottom-color: var(--success);
        }
        
        .form-group input.invalid {
            border-bottom-color: var(--error);
        }
        
        .form-group textarea {
            min-height: 80px;
            resize: vertical;
        }
        
        .form-row {
            display: grid;
            gap: 24px;
        }
        
        .form-row.cols-2 {
            grid-template-columns: 1fr 1fr;
        }
        
        .form-row.cols-3 {
            grid-template-columns: 1fr 1fr 1fr;
        }
        
        .input-with-button {
            display: flex;
            gap: 12px;
            align-items: flex-end;
        }
        
        .input-with-button input {
            flex: 1;
        }
        
        /* Simple Button Styling - Clean like inspiration.html */
        .btn {
            padding: 12px 24px;
            border: 1px solid var(--primary);
            background: var(--primary);
            color: white;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            font-family: var(--reddit-sans);
            white-space: nowrap;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn:hover {
            background: var(--bg-white);
            color: var(--primary);
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .btn-secondary {
            background: var(--bg-white);
            color: var(--primary);
            border-color: var(--border-gray);
        }
        
        .btn-secondary:hover {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }
        
        .btn-success {
            background: var(--success);
            border-color: var(--success);
            color: white;
        }
        
        .btn-success:hover {
            background: var(--bg-white);
            color: var(--success);
            border-color: var(--success);
        }
        
        .btn-danger {
            background: var(--error);
            border-color: var(--error);
            color: white;
        }
        
        .btn-danger:hover {
            background: var(--bg-white);
            color: var(--error);
            border-color: var(--error);
        }
        
        .btn-sm {
            padding: 8px 16px;
            font-size: 0.875rem;
        }
        
        /* Status Messages */
        .status {
            padding: 12px 0;
            margin: 12px 0;
            font-size: 0.9rem;
            font-weight: 500;
        }
        
        .status.success {
            color: var(--success);
        }
        
        .status.error {
            color: var(--error);
        }
        
        .status.loading {
            color: var(--light-gray);
        }
        
        /* Simple View Toggle */
        .view-toggle {
            display: flex;
            border: 1px solid var(--border-gray);
            overflow: hidden;
        }
        
        .view-toggle button {
            padding: 8px 16px;
            border: none;
            background: var(--bg-white);
            color: var(--light-gray);
            cursor: pointer;
            transition: var(--transition);
            font-family: inherit;
        }
        
        .view-toggle button.active {
            background: var(--primary);
            color: white;
        }
        
        /* Clean Table */
        .table-container {
            background: var(--bg-white);
            border: 1px solid var(--border-gray);
            overflow-x: auto;
        }
        
        .table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .table th {
            background: var(--bg-light);
            padding: 16px;
            text-align: left;
            font-weight: 500;
            color: var(--primary);
            border-bottom: 1px solid var(--border-gray);
        }
        
        .table td {
            padding: 16px;
            border-bottom: 1px solid var(--border-gray);
            color: var(--primary);
        }
        
        .table tr:hover {
            background: var(--bg-light);
        }
        
        .table th button {
            background: none;
            border: none;
            color: inherit;
            font-weight: inherit;
            cursor: pointer;
            font-family: inherit;
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        /* Simple Cards */
        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 24px;
        }
        
        .request-card {
            background: var(--bg-white);
            border: 1px solid var(--border-gray);
            padding: 24px;
        }
        
        .request-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 16px;
        }
        
        .request-id {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--light-gray);
        }
        
        .request-title {
            font-size: 1rem;
            font-weight: 500;
            color: var(--primary);
            margin-bottom: 12px;
            line-height: 1.4;
        }
        
        .request-meta {
            font-size: 0.875rem;
            color: var(--light-gray);
            margin-bottom: 16px;
        }
        
        .request-meta div {
            margin-bottom: 4px;
        }
        
        .request-actions {
            display: flex;
            gap: 8px;
        }
        
        /* Status Badges - Simple */
        .status-badge {
            padding: 4px 8px;
            font-size: 0.75rem;
            font-weight: 500;
            color: var(--primary);
            border: 1px solid var(--border-gray);
        }
        
        .status-badge.order {
            background: #fffbeb;
            color: #92400e;
            border-color: #fbbf24;
        }
        
        .status-badge.received {
            background: #eff6ff;
            color: #1e40af;
            border-color: #3b82f6;
        }
        
        .status-badge.processing {
            background: #fef3c7;
            color: #d97706;
            border-color: #f59e0b;
        }
        
        .status-badge.completed {
            background: #f0fdf4;
            color: #166534;
            border-color: #22c55e;
        }
        
        .status-badge.cancelled {
            background: #fef2f2;
            color: #991b1b;
            border-color: #ef4444;
        }
        
        /* Priority Badges */
        .priority-badge {
            padding: 4px 8px;
            font-size: 0.75rem;
            font-weight: 500;
            border: 1px solid var(--border-gray);
        }
        
        .priority-badge.low {
            background: #f0fdf4;
            color: #166534;
        }
        
        .priority-badge.normal {
            background: var(--bg-light);
            color: var(--light-gray);
        }
        
        .priority-badge.high {
            background: #fffbeb;
            color: #92400e;
        }
        
        .priority-badge.urgent {
            background: #fef2f2;
            color: #991b1b;
        }
        
        /* MeSH Tags - Color Coded by Type */
        .mesh-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 12px;
        }
        
        .mesh-tag {
            padding: 4px 8px;
            font-size: 0.75rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            border-radius: 12px;
            border: 1px solid;
        }
        
        .mesh-tag:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        /* Color coding by type */
        .mesh-tag-mesh {
            background: #f0f9ff;
            color: #1e40af;
            border-color: #93c5fd;
        }
        
        .mesh-tag-trial {
            background: #fef3c7;
            color: #92400e;
            border-color: #fbbf24;
        }
        
        .mesh-tag-sponsor {
            background: #e5e7eb;
            color: #374151;
            border-color: #9ca3af;
        }
        
        .mesh-tag-intervention {
            background: #dcfce7;
            color: #166534;
            border-color: #4ade80;
        }
        
        .mesh-tag-condition {
            background: #fce7f3;
            color: #be185d;
            border-color: #f9a8d4;
        }
        
        .mesh-tag-phase {
            background: #ede9fe;
            color: #7c3aed;
            border-color: #c4b5fd;
        }
        
        .mesh-tag.major::after {
            content: " ★";
            color: #f59e0b;
        }
        
        /* Search and Filters */
        .search-filters {
            background: var(--bg-white);
            padding: 24px;
            margin-bottom: 24px;
            border: 1px solid var(--border-gray);
        }
        
        .search-bar {
            position: relative;
            margin-bottom: 16px;
        }
        
        .search-input {
            padding-left: 40px;
        }
        
        .search-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--light-gray);
        }
        
        .filters-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
        }
        
        /* Bulk Operations */
        .bulk-actions {
            background: var(--bg-white);
            padding: 16px 24px;
            border-bottom: 1px solid var(--border-gray);
            display: none;
            align-items: center;
            gap: 16px;
        }
        
        .bulk-actions.show {
            display: flex;
        }
        
        .bulk-actions-text {
            font-size: 0.9rem;
            color: var(--primary);
        }
        
        .checkbox-cell {
            width: 40px;
            text-align: center;
        }
        
        .checkbox-cell input[type="checkbox"] {
            width: 16px;
            height: 16px;
        }
        
        /* Stats - Simple */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 24px;
            margin-bottom: 32px;
        }
        
        .stat-card {
            background: var(--bg-white);
            padding: 24px;
            text-align: center;
            border: 1px solid var(--border-gray);
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 500;
            color: var(--primary);
            margin-bottom: 8px;
        }
        
        .stat-label {
            font-size: 0.875rem;
            color: var(--light-gray);
        }
        
        /* Workflow Steps - Simple */
        .workflow-steps {
            display: flex;
            justify-content: space-between;
            margin-bottom: 32px;
            padding: 24px;
            background: var(--bg-white);
            border: 1px solid var(--border-gray);
        }
        
        .workflow-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            flex: 1;
        }
        
        .step-circle {
            width: 32px;
            height: 32px;
            border: 2px solid var(--border-gray);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--light-gray);
            background: var(--bg-white);
        }
        
        .step-circle.active {
            background: var(--primary);
            border-color: var(--primary);
            color: white;
        }
        
        .step-circle.completed {
            background: var(--success);
            border-color: var(--success);
            color: white;
        }
        
        .step-label {
            font-size: 0.875rem;
            color: var(--light-gray);
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .content-header {
                padding: 16px;
            }
            
            .content-body {
                padding: 16px;
            }
            
            .form-container {
                padding: 24px 16px;
            }
            
            .form-row.cols-2,
            .form-row.cols-3 {
                grid-template-columns: 1fr;
            }
            
            .cards-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .input-with-button {
                flex-direction: column;
                align-items: stretch;
                gap: 8px;
            }
            
            .workflow-steps {
                flex-direction: column;
                gap: 16px;
            }
        }
        
        /* Utility Classes */
        .hidden { display: none !important; }
        
        /* Tab Content Management */
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
        
        .spinner {
            width: 14px;
            height: 14px;
            border: 2px solid var(--border-gray);
            border-top-color: var(--primary);
            animation: spin 1s linear infinite;
            margin-left: 8px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body data-theme="light">
    <!-- Mobile Navigation Toggle -->
    <button class="nav-toggle" id="navToggle" aria-label="Toggle navigation">
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="3" y1="6" x2="21" y2="6"></line>
            <line x1="3" y1="12" x2="21" y2="12"></line>
            <line x1="3" y1="18" x2="21" y2="18"></line>
        </svg>
    </button>

    <div class="app-container">
        <!-- Sidebar Navigation -->
        <nav class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <div class="logo-text">SilentStacks</div>
            </div>
            
            <div class="nav-tabs">
                <button class="nav-tab active" data-tab="dashboard">Dashboard</button>
                <button class="nav-tab" data-tab="add-request">Add Request</button>
                <button class="nav-tab" data-tab="manage-requests">Manage Requests</button>
                <button class="nav-tab" data-tab="bulk-operations">Bulk Operations</button>
                <button class="nav-tab" data-tab="settings">Settings</button>
                <button class="nav-tab" data-tab="help">Help</button>
            </div>
            
            <div class="sidebar-footer">
                <div>SilentStacks v2.0</div>
                <div id="networkStatus">● Online</div>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="main-content" id="mainContent">
            <!-- Live region for screen readers -->
            <div id="ss-live" aria-live="polite" class="sr-only"></div>

            <!-- Dashboard Tab -->
            <div class="tab-content active" id="dashboard">
                <div class="content-header">
                    <h1 class="page-title">Dashboard</h1>
                    <div class="content-actions">
                        <button class="btn" onclick="showTab('add-request')">New Request</button>
                    </div>
                </div>
                <div class="content-body">
                    <!-- Stats Cards -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value" id="totalRequests">0</div>
                            <div class="stat-label">Total Requests</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="pendingRequests">0</div>
                            <div class="stat-label">Pending Requests</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="inProgressRequests">0</div>
                            <div class="stat-label">In Progress Requests</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="completedRequests">0</div>
                            <div class="stat-label">Completed Requests</div>
                        </div>
                    </div>

                    <!-- Recent Requests -->
                    <div class="form-container">
                        <h2>Recent Requests</h2>
                        <div id="recentRequests">
                            <p style="color: var(--light-gray);">No recent requests</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Add Request Tab -->
            <div class="tab-content" id="add-request">
                <div class="content-header">
                    <h1 class="page-title">Add New Request</h1>
                </div>
                <div class="content-body">
                    <!-- Workflow Steps -->
                    <div class="workflow-steps">
                        <div class="workflow-step">
                            <div class="step-circle active">1</div>
                            <div class="step-label">Order</div>
                        </div>
                        <div class="workflow-step">
                            <div class="step-circle">2</div>
                            <div class="step-label">Received</div>
                        </div>
                        <div class="workflow-step">
                            <div class="step-circle">3</div>
                            <div class="step-label">Processing</div>
                        </div>
                        <div class="workflow-step">
                            <div class="step-circle">4</div>
                            <div class="step-label">Completed</div>
                        </div>
                    </div>

                    <!-- Research Lookup -->
                    <div class="form-container">
                        <div class="form-section">
                            <h2>Research Intelligence Lookup</h2>
                            
                            <div class="form-row cols-3">
                                <div class="form-group">
                                    <label for="pmid">PubMed ID</label>
                                    <div class="input-with-button">
                                        <input type="text" id="pmid" placeholder="Enter PMID" maxlength="9">
                                        <button type="button" id="lookup-pmid" class="btn">
                                            <span class="btn-text">Lookup</span>
                                            <span class="spinner hidden"></span>
                                        </button>
                                    </div>
                                    <div id="pmid-status" class="status hidden"></div>
                                </div>

                                <div class="form-group">
                                    <label for="doi">DOI</label>
                                    <div class="input-with-button">
                                        <input type="text" id="doi" placeholder="10.1000/example">
                                        <button type="button" id="lookup-doi" class="btn">
                                            <span class="btn-text">Lookup</span>
                                            <span class="spinner hidden"></span>
                                        </button>
                                    </div>
                                    <div id="doi-status" class="status hidden"></div>
                                </div>

                                <div class="form-group">
                                    <label for="nct">Clinical Trial NCT</label>
                                    <div class="input-with-button">
                                        <input type="text" id="nct" placeholder="NCT00000000" maxlength="11">
                                        <button type="button" id="lookup-nct" class="btn">
                                            <span class="btn-text">Lookup</span>
                                            <span class="spinner hidden"></span>
                                        </button>
                                    </div>
                                    <div id="nct-status" class="status hidden"></div>
                                </div>
                            </div>

                            <!-- MeSH Terms Display -->
                            <div id="gl-chips" class="mesh-container hidden"></div>
                        </div>
                    </div>

                    <!-- Publication Details -->
                    <div class="form-container">
                        <div class="form-section">
                            <h2>Publication Details</h2>
                            
                            <form id="requestForm">
                                <div class="form-group">
                                    <label for="title">Title</label>
                                    <textarea id="title" rows="3" placeholder="Article title" required></textarea>
                                </div>

                                <div class="form-row cols-2">
                                    <div class="form-group">
                                        <label for="authors">Authors</label>
                                        <input type="text" id="authors" placeholder="Author names">
                                    </div>
                                    <div class="form-group">
                                        <label for="journal">Journal</label>
                                        <input type="text" id="journal" placeholder="Journal name">
                                    </div>
                                </div>

                                <div class="form-row cols-3">
                                    <div class="form-group">
                                        <label for="year">Year</label>
                                        <input type="number" id="year" placeholder="2024" min="1900" max="2030">
                                    </div>
                                    <div class="form-group">
                                        <label for="volume">Volume</label>
                                        <input type="text" id="volume" placeholder="Volume">
                                    </div>
                                    <div class="form-group">
                                        <label for="pages">Pages</label>
                                        <input type="text" id="pages" placeholder="Pages">
                                    </div>
                                </div>

                                <!-- Clinical Trial Fields -->
                                <div class="form-row cols-3">
                                    <div class="form-group">
                                        <label for="gl-nct-title">NCT Title</label>
                                        <input type="text" id="gl-nct-title" placeholder="Clinical trial title">
                                    </div>
                                    <div class="form-group">
                                        <label for="gl-phase">Phase</label>
                                        <input type="text" id="gl-phase" placeholder="Phase">
                                    </div>
                                    <div class="form-group">
                                        <label for="gl-ct-status">CT Status</label>
                                        <input type="text" id="gl-ct-status" placeholder="Clinical trial status">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="gl-sponsor">Sponsor</label>
                                    <input type="text" id="gl-sponsor" placeholder="Study sponsor">
                                </div>

                                <!-- Request Management -->
                                <div class="form-row cols-2">
                                    <div class="form-group">
                                        <label for="patron-email">Patron Email</label>
                                        <input type="email" id="patron-email" placeholder="researcher@university.edu" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="docline">DOCLINE Number</label>
                                        <input type="text" id="docline" placeholder="DOC123456">
                                    </div>
                                </div>

                                <div class="form-row cols-2">
                                    <div class="form-group">
                                        <label for="priority">Urgency</label>
                                        <select id="priority">
                                            <option value="low">Low</option>
                                            <option value="normal" selected>Normal</option>
                                            <option value="high">High</option>
                                            <option value="urgent">Urgent</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="status">Fill Status</label>
                                        <select id="status">
                                            <option value="order" selected>Order</option>
                                            <option value="received">Received</option>
                                            <option value="processing">Processing</option>
                                            <option value="completed">Completed</option>
                                            <option value="cancelled">Cancelled</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="tags">Tags</label>
                                    <input type="text" id="tags" placeholder="Enter tags separated by commas">
                                </div>

                                <div class="form-group">
                                    <label for="notes">Notes</label>
                                    <textarea id="notes" rows="4" placeholder="Additional notes..."></textarea>
                                </div>

                                <div class="form-row cols-2">
                                    <button type="submit" class="btn btn-success">Save Request</button>
                                    <button type="button" id="clearForm" class="btn btn-secondary">Clear Form</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Manage Requests Tab -->
            <div class="tab-content" id="manage-requests">
                <div class="content-header">
                    <h1 class="page-title">Manage Requests</h1>
                    <div class="content-actions">
                        <div class="view-toggle">
                            <button class="active" data-view="table">Table</button>
                            <button data-view="cards">Cards</button>
                        </div>
                        <button class="btn" onclick="showTab('add-request')">New Request</button>
                    </div>
                </div>
                
                <!-- Bulk Actions Bar (Hidden by default) -->
                <div class="bulk-actions" id="bulkActions">
                    <span class="bulk-actions-text" id="bulkActionsText">0 selected</span>
                    <button class="btn btn-sm btn-secondary" id="bulkEdit">Edit Selected</button>
                    <button class="btn btn-sm btn-danger" id="bulkDelete">Delete Selected</button>
                    <button class="btn btn-sm btn-secondary" id="bulkCancel">Cancel</button>
                </div>
                
                <div class="content-body">
                    <!-- Search and Filters -->
                    <div class="search-filters">
                        <div class="search-bar">
                            <span class="search-icon">🔍</span>
                            <input type="text" id="searchInput" class="search-input" placeholder="Search requests...">
                        </div>
                        <div class="filters-row">
                            <div class="form-group">
                                <label>Fill Status</label>
                                <select id="statusFilter">
                                    <option value="">All Fill Statuses</option>
                                    <option value="order">Order</option>
                                    <option value="received">Received</option>
                                    <option value="processing">Processing</option>
                                    <option value="completed">Completed</option>
                                    <option value="cancelled">Cancelled</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Urgency</label>
                                <select id="priorityFilter">
                                    <option value="">All Urgency Levels</option>
                                    <option value="low">Low</option>
                                    <option value="normal">Normal</option>
                                    <option value="high">High</option>
                                    <option value="urgent">Urgent</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>Date From</label>
                                <input type="date" id="dateFrom">
                            </div>
                            <div class="form-group">
                                <label>Date To</label>
                                <input type="date" id="dateTo">
                            </div>
                        </div>
                    </div>

                    <!-- Table View -->
                    <div id="tableView" class="table-container">
                        <table class="table" id="requests-table">
                            <thead>
                                <tr>
                                    <th class="checkbox-cell">
                                        <input type="checkbox" id="selectAll">
                                    </th>
                                    <th>
                                        <button onclick="sortTable('priority')">
                                            Urgency <span id="sort-priority">↕️</span>
                                        </button>
                                    </th>
                                    <th>
                                        <button onclick="sortTable('docline')">
                                            DOCLINE # <span id="sort-docline">↕️</span>
                                        </button>
                                    </th>
                                    <th>
                                        <button onclick="sortTable('pmid')">
                                            PMID <span id="sort-pmid">↕️</span>
                                        </button>
                                    </th>
                                    <th>
                                        <button onclick="sortTable('title')">
                                            Citation <span id="sort-title">↕️</span>
                                        </button>
                                    </th>
                                    <th>
                                        <button onclick="sortTable('patronEmail')">
                                            Patron e-mail <span id="sort-patronEmail">↕️</span>
                                        </button>
                                    </th>
                                    <th>
                                        <button onclick="sortTable('status')">
                                            Fill Status <span id="sort-status">↕️</span>
                                        </button>
                                    </th>
                                    <th>
                                        <button onclick="sortTable('updated')">
                                            Last Updated <span id="sort-updated">↕️</span>
                                        </button>
                                    </th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Dynamic content -->
                            </tbody>
                        </table>
                    </div>

                    <!-- Cards View -->
                    <div id="cardsView" class="cards-grid hidden">
                        <!-- Dynamic content -->
                    </div>
                </div>
            </div>

            <!-- Bulk Operations Tab -->
            <div class="tab-content" id="bulk-operations">
                <div class="content-header">
                    <h1 class="page-title">Bulk Operations</h1>
                </div>
                <div class="content-body">
                    <div class="form-row cols-2">
                        <!-- Bulk Import -->
                        <div class="form-container">
                            <div class="form-section">
                                <h2>Bulk Import</h2>
                                
                                <div class="form-group">
                                    <label for="bulk-paste-data">Paste Identifiers</label>
                                    <textarea id="bulk-paste-data" rows="6" placeholder="Paste PMIDs, DOIs, or NCT IDs (any format)"></textarea>
                                </div>
                                <button type="button" id="bulk-paste-btn" class="btn btn-success">Process Paste</button>
                            </div>
                        </div>

                        <!-- File Upload -->
                        <div class="form-container">
                            <div class="form-section">
                                <h2>File Upload</h2>
                                
                                <div class="form-group">
                                    <label for="bulk-upload">Upload File</label>
                                    <input type="file" id="bulk-upload" accept=".txt,.csv,.json">
                                </div>
                                <button type="button" id="bulk-upload-btn" class="btn btn-success">Process File</button>
                            </div>
                        </div>
                    </div>

                    <!-- Export -->
                    <div class="form-container">
                        <div class="form-section">
                            <h2>Export Data</h2>
                            
                            <div class="form-row cols-3">
                                <button type="button" id="exportCSV" class="btn btn-secondary">Export CSV</button>
                                <button type="button" id="exportJSON" class="btn btn-secondary">Export JSON</button>
                                <button type="button" id="exportNLM" class="btn btn-secondary">Export NLM Citations</button>
                            </div>
                            <div class="form-row cols-3">
                                <button type="button" id="printRequests" class="btn btn-secondary">Print Report</button>
                                <button type="button" id="validateData" class="btn btn-secondary">Validate Data Quality</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Settings Tab -->
            <div class="tab-content" id="settings">
                <div class="content-header">
                    <h1 class="page-title">Settings</h1>
                </div>
                <div class="content-body">
                    <div class="form-row cols-2">
                        <!-- API Configuration -->
                        <div class="form-container">
                            <div class="form-section">
                                <h2>API Configuration</h2>
                                
                                <div class="form-group">
                                    <label for="api-key">NCBI API Key</label>
                                    <input type="password" id="api-key" placeholder="Optional for higher rate limits">
                                </div>
                                <div class="form-group">
                                    <label for="crossref-email">CrossRef Email</label>
                                    <input type="email" id="crossref-email" placeholder="your.email@domain.com">
                                </div>
                                <button type="button" id="saveSettings" class="btn">Save Settings</button>
                            </div>
                        </div>

                        <!-- Appearance -->
                        <div class="form-container">
                            <div class="form-section">
                                <h2>Appearance</h2>
                                
                                <div class="form-group">
                                    <label for="themeSelect">Theme</label>
                                    <select id="themeSelect">
                                        <option value="light">Light</option>
                                        <option value="dark">Dark</option>
                                        <option value="high-contrast">High Contrast</option>
                                    </select>
                                </div>
                                <button type="button" id="saveAppearance" class="btn">Save Appearance</button>
                            </div>
                        </div>
                    </div>

                    <!-- Data Management -->
                    <div class="form-container">
                        <div class="form-section">
                            <h2>Data Management</h2>
                            
                            <div class="form-row cols-3">
                                <button type="button" id="backupData" class="btn btn-secondary">Backup Data</button>
                                <button type="button" id="restoreData" class="btn btn-secondary">Restore Data</button>
                                <button type="button" id="clearData" class="btn btn-danger">Clear All Data</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Help Tab -->
            <div class="tab-content" id="help">
                <div class="content-header">
                    <h1 class="page-title">Help & Documentation</h1>
                </div>
                <div class="content-body">
                    <div class="form-container">
                        <div class="form-section">
                            <h2>Quick Start Guide</h2>
                            
                            <h3>Getting Started</h3>
                            <ol>
                                <li><strong>Add a Request:</strong> Click "New Request" and enter publication details</li>
                                <li><strong>Use Research Lookup:</strong> Enter PMID, DOI, or NCT to auto-populate</li>
                                <li><strong>Manage Workflow:</strong> Track requests through 4-step process</li>
                                <li><strong>View Data:</strong> Toggle between table and card views</li>
                                <li><strong>Bulk Operations:</strong> Import/export multiple requests</li>
                            </ol>

                            <h3>Keyboard Shortcuts</h3>
                            <ul>
                                <li><kbd>F1</kbd> - Open help</li>
                                <li><kbd>Ctrl+N</kbd> - New request</li>
                                <li><kbd>Ctrl+S</kbd> - Save current form</li>
                                <li><kbd>Ctrl+F</kbd> - Focus search</li>
                            </ul>

                            <h3>Features</h3>
                            <ul>
                                <li><strong>Dashboard:</strong> Overview of all requests and statistics</li>
                                <li><strong>Add Request:</strong> Create new ILL requests with research intelligence</li>
                                <li><strong>Manage Requests:</strong> View, edit, delete with table/card views</li>
                                <li><strong>Bulk Operations:</strong> Import/export multiple requests</li>
                                <li><strong>Settings:</strong> API configuration and preferences</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        // =============================================================================
        // SILENTSTACKS v2.0 - COMPLETE ILL MANAGEMENT WITH ENRICHMENT PIPELINE
        // =============================================================================
        
        const APP_STATE = {
            requests: JSON.parse(localStorage.getItem('silentStacks_requests') || '[]'),
            settings: JSON.parse(localStorage.getItem('silentStacks_settings') || '{}'),
            currentView: 'table',
            currentSort: { field: 'created', direction: 'desc' },
            selectedRequests: new Set(),
            fuse: null
        };

        let requestIdCounter = parseInt(localStorage.getItem('silentStacks_counter') || '1');

        // =============================================================================
        // SELECTOR MAP (AI-COMPATIBLE CONTRACT)
        // =============================================================================
        
        const SELECTORS = {
            buttons: {
                lookup_pmid: "#lookup-pmid",
                lookup_doi: "#lookup-doi", 
                lookup_nct: "#lookup-nct",
                bulk_paste: "#bulk-paste-btn",
                bulk_upload: "#bulk-upload-btn"
            },
            inputs: {
                pmid: "#pmid",
                doi: "#doi",
                nct: "#nct",
                title: "#title",
                authors: "#authors",
                journal: "#journal",
                year: "#year",
                volume: "#volume",
                pages: "#pages",
                tags_text: "#tags",
                patron: "#patron-email",
                status: "#status",
                priority: "#priority",
                docline: "#docline"
            },
            clinical_trials: {
                phase: "#gl-phase",
                status: "#gl-ct-status",
                sponsor: "#gl-sponsor",
                nct_title: "#gl-nct-title"
            },
            chips: {
                mesh: "#gl-chips"
            },
            bulk: {
                paste_textarea: "#bulk-paste-data",
                upload_input: "#bulk-upload"
            },
            table: {
                requests_tbody: "#requests-table tbody"
            },
            status_regions: {
                live: "#ss-live",
                pmid: "#pmid-status",
                doi: "#doi-status", 
                nct: "#nct-status"
            }
        };

        // =============================================================================
        // ENHANCED PMID ENRICHMENT PIPELINE (From test.html - Source of Truth)
        // =============================================================================

        class PMIDEnrichmentPipeline {
            constructor(options = {}) {
                this.apiKey = options.apiKey || '';
                this.crossrefEmail = options.crossrefEmail || '';
                this.cache = new Map();
                this.rateLimiter = new Map();
            }

            async enrichPMID(pmid) {
                console.log(`Starting enrichment pipeline for PMID: ${pmid}`);
                
                const result = {
                    pmid: pmid,
                    status: 'processing',
                    pubmed: null,
                    clinicalTrial: null,
                    unified: null,
                    errors: [],
                    timing: { start: Date.now() }
                };

                try {
                    console.log('Step 1: Fetching PubMed data...');
                    result.pubmed = await this.fetchPubMedData(pmid);
                    result.timing.pubmedComplete = Date.now();
                    
                    if (result.pubmed.nct) {
                        console.log(`Step 2: Found NCT ${result.pubmed.nct}, fetching comprehensive clinical trial data...`);
                        try {
                            result.clinicalTrial = await this.fetchEnhancedClinicalTrialData(result.pubmed.nct);
                            result.timing.clinicalTrialComplete = Date.now();
                        } catch (error) {
                            console.warn('Clinical trial fetch failed:', error);
                            result.errors.push(`Clinical trial lookup failed: ${error.message}`);
                        }
                    } else {
                        console.log('Step 2: No NCT found in PubMed data');
                    }

                    console.log('Step 3: Creating unified data model...');
                    result.unified = this.mergeData(result.pubmed, result.clinicalTrial);
                    result.status = 'complete';
                    result.timing.complete = Date.now();

                    console.log('Pipeline complete:', result);
                    return result;

                } catch (error) {
                    console.error('Pipeline failed:', error);
                    result.status = 'failed';
                    result.errors.push(error.message);
                    return result;
                }
            }

            async enrichDOI(doi) {
                console.log(`Starting DOI enrichment for: ${doi}`);
                
                const result = {
                    doi: doi,
                    status: 'processing',
                    crossref: null,
                    pubmed: null,
                    unified: null,
                    errors: []
                };

                try {
                    // Demo data for testing
                    if (doi === '10.1056/NEJMoa0803399') {
                        result.unified = this.getDemoDOIData(doi);
                        result.status = 'complete';
                        return result;
                    }

                    // Real implementation would go here
                    throw new Error('DOI enrichment requires server proxy for CORS');
                    
                } catch (error) {
                    result.status = 'failed';
                    result.errors.push(error.message);
                    return result;
                }
            }

            async enrichNCT(nct) {
                console.log(`Starting NCT enrichment for: ${nct}`);
                
                const result = {
                    nct: nct,
                    status: 'processing',
                    clinicalTrial: null,
                    unified: null,
                    errors: []
                };

                try {
                    // Demo data for testing
                    if (nct === 'NCT00048516') {
                        result.unified = this.getDemoNCTData(nct);
                        result.status = 'complete';
                        return result;
                    }

                    // Real implementation would go here
                    throw new Error('NCT enrichment requires server proxy for CORS');
                    
                } catch (error) {
                    result.status = 'failed';
                    result.errors.push(error.message);
                    return result;
                }
            }

            getDemoDOIData(doi) {
                return {
                    doi: doi,
                    title: 'Sorafenib in patients with advanced hepatocellular carcinoma',
                    authors: 'Llovet JM; Ricci S; Mazzaferro V; et al.',
                    journal: 'New England Journal of Medicine',
                    year: '2008',
                    volume: '359',
                    pages: '378-90',
                    tags: [
                        { name: 'Hepatocellular Carcinoma', type: 'mesh' },
                        { name: 'Antineoplastic Agents', type: 'mesh' },
                        { name: 'Sorafenib', type: 'mesh' }
                    ]
                };
            }

            getDemoNCTData(nct) {
                return {
                    nct: nct,
                    title: 'Sorafenib vs Placebo in Advanced Hepatocellular Carcinoma',
                    clinicalTrial: {
                        nctId: nct,
                        title: 'Sorafenib in Patients With Advanced Hepatocellular Carcinoma',
                        phase: 'III',
                        status: 'Completed',
                        sponsor: 'Bayer Healthcare Pharmaceuticals'
                    },
                    tags: [
                        { name: 'Phase III', type: 'trial' },
                        { name: 'Hepatocellular Carcinoma', type: 'mesh' }
                    ]
                };
            }

            async fetchPubMedData(pmid) {
                // DEMO MODE - Show sample data for test PMIDs
                if (pmid === '18539917') {
                    return {
                        pmid: pmid,
                        title: 'Sorafenib in patients with advanced hepatocellular carcinoma: a randomized, double-blind, placebo-controlled phase 3 trial',
                        authors: 'Llovet JM; Ricci S; Mazzaferro V; Hilgard P; Gane E; Blanc JF; et al.',
                        journal: 'New England Journal of Medicine',
                        year: '2008',
                        volume: '359',
                        pages: '378-90',
                        doi: '10.1056/NEJMoa0803399',
                        nct: 'NCT00048516',
                        mesh: [
                            'Hepatocellular Carcinoma',
                            'Antineoplastic Agents',
                            'Sorafenib',
                            'Clinical Trial, Phase III',
                            'Randomized Controlled Trial'
                        ]
                    };
                }

                if (pmid === '23842776') {
                    return {
                        pmid: pmid,
                        title: 'Single-cell RNA-seq reveals dynamic paracrine control of cellular variation',
                        authors: 'Shalek AK; Satija R; Adiconis X; et al.',
                        journal: 'Cell',
                        year: '2013',
                        volume: '154',
                        pages: '1395-408',
                        doi: '10.1016/j.cell.2013.06.020',
                        mesh: [
                            'Single-Cell Analysis',
                            'RNA-Seq',
                            'Gene Expression Profiling',
                            'Transcriptome'
                        ]
                    };
                }

                // For real implementation, would need server proxy due to CORS
                throw new Error('CORS: PubMed APIs cannot be called directly from browser. Use demo PMIDs: 18539917 or 23842776');
            }

            async fetchEnhancedClinicalTrialData(nctId) {
                if (nctId === 'NCT00048516') {
                    return {
                        nctId: nctId,
                        title: 'Sorafenib in Patients With Advanced Hepatocellular Carcinoma',
                        phase: 'III',
                        status: 'Completed',
                        sponsor: 'Bayer Healthcare Pharmaceuticals Inc./Onyx Pharmaceuticals',
                        enrollment: '602',
                        conditions: ['Hepatocellular Carcinoma', 'Liver Cancer'],
                        interventions: [
                            { type: 'Drug', name: 'Sorafenib' },
                            { type: 'Drug', name: 'Placebo' }
                        ]
                    };
                }

                throw new Error('CORS: ClinicalTrials.gov APIs cannot be called directly from browser');
            }

            mergeData(pubmedData, clinicalTrialData) {
                console.log('Merging PubMed and clinical trial data...');
                
                const tags = [];

                // Add MeSH terms as tags with proper typing
                if (pubmedData.mesh) {
                    pubmedData.mesh.slice(0, 8).forEach(term => {
                        // Assign type based on term content
                        let type = 'mesh';
                        if (term.toLowerCase().includes('phase')) type = 'phase';
                        if (term.toLowerCase().includes('trial')) type = 'trial';
                        if (term.toLowerCase().includes('clinical')) type = 'trial';
                        
                        tags.push({
                            name: term,
                            type: type,
                            source: 'pubmed'
                        });
                    });
                }

                // Add clinical trial tags
                if (clinicalTrialData) {
                    if (clinicalTrialData.phase && tags.length < 8) {
                        tags.push({
                            name: `Phase ${clinicalTrialData.phase}`,
                            type: 'phase',
                            source: 'clinicaltrials'
                        });
                    }
                    
                    if (clinicalTrialData.conditions && tags.length < 8) {
                        clinicalTrialData.conditions.slice(0, 2).forEach(condition => {
                            if (tags.length < 8) {
                                tags.push({
                                    name: condition,
                                    type: 'condition',
                                    source: 'clinicaltrials'
                                });
                            }
                        });
                    }
                    
                    if (clinicalTrialData.interventions && tags.length < 8) {
                        clinicalTrialData.interventions.slice(0, 2).forEach(intervention => {
                            if (tags.length < 8) {
                                tags.push({
                                    name: intervention.type || 'Intervention',
                                    type: 'intervention',
                                    source: 'clinicaltrials'
                                });
                            }
                        });
                    }
                }

                return {
                    pmid: pubmedData.pmid,
                    doi: pubmedData.doi,
                    nct: clinicalTrialData?.nctId || pubmedData.nct,
                    title: pubmedData.title,
                    authors: pubmedData.authors,
                    journal: pubmedData.journal,
                    year: pubmedData.year,
                    volume: pubmedData.volume,
                    pages: pubmedData.pages,
                    clinicalTrial: clinicalTrialData,
                    tags: tags,
                    mesh: pubmedData.mesh,
                    enrichmentDate: new Date().toISOString()
                };
            }

            formatAuthors(authors) {
                if (!Array.isArray(authors)) return '';
                return authors.map(author => author.name || author).join('; ');
            }
        }

        // =============================================================================
        // UI ADAPTER - WIRES ENGINE TO SELECTORS
        // =============================================================================

        const $ = s => document.querySelector(s);
        const $$ = s => Array.from(document.querySelectorAll(s));
        const setVal = (sel, v) => $$(sel).forEach(el => { 
            if ('value' in el) el.value = v ?? ''; 
            else el.textContent = v ?? ''; 
        });
        const getVal = sel => { 
            const el = $(sel); 
            return el ? ('value' in el ? el.value : el.textContent) : ''; 
        };
        const say = (sel, msg) => setVal(sel, msg);

        // Global engine instance
        const engine = new PMIDEnrichmentPipeline({
            apiKey: APP_STATE.settings.apiKey || '',
            crossrefEmail: APP_STATE.settings.crossrefEmail || ''
        });

        function normAuthors(a) {
            return Array.isArray(a) ? a.map(x => x.name || x.family || x.last || x).join('; ') : (a || '');
        }

        function dedupe(arr) {
            return Array.from(new Set(arr));
        }

        function fillTrial(ct) {
            if (!ct) return;
            setVal(SELECTORS.clinical_trials.phase, ct.phase || '');
            setVal(SELECTORS.clinical_trials.status, ct.status || '');
            setVal(SELECTORS.clinical_trials.sponsor, ct.sponsor || '');
            if (ct.title) setVal(SELECTORS.clinical_trials.nct_title, ct.title);
        }

        function renderChips(tags) {
            if (!tags) return;
            const containers = $(SELECTORS.chips.mesh);
            if (!containers.length) return;
            
            containers.forEach(c => {
                // Show container and remove only auto-added chips
                c.classList.remove('hidden');
                c.querySelectorAll('[data-auto="true"]').forEach(x => x.remove());
                
                tags.slice(0, 8).forEach(tag => {
                    const chip = document.createElement('span');
                    const tagName = typeof tag === 'string' ? tag : tag.name;
                    const tagType = typeof tag === 'object' ? tag.type : 'mesh';
                    
                    // Color coding based on type
                    chip.className = `mesh-tag mesh-tag-${tagType}`;
                    chip.dataset.auto = 'true';
                    chip.dataset.type = tagType;
                    chip.textContent = tagName;
                    chip.title = `Click to add: ${tagName} (${tagType})`;
                    chip.style.cursor = 'pointer';
                    
                    // Make chips clickable to add to tags field
                    chip.addEventListener('click', () => {
                        addTagToField(tagName);
                        chip.style.opacity = '0.5';
                        setTimeout(() => { chip.style.opacity = '1'; }, 200);
                    });
                    
                    c.appendChild(chip);
                });
            });
        }

        function addTagToField(tagName) {
            const tagsField = $(SELECTORS.inputs.tags_text);
            if (!tagsField) return;
            
            const currentTags = tagsField.value.split(',').map(t => t.trim()).filter(Boolean);
            if (!currentTags.includes(tagName)) {
                currentTags.push(tagName);
                tagsField.value = currentTags.join(', ');
                announceToScreenReader(`Added tag: ${tagName}`);
            }
        }

        function mergeTagsText(existing, incoming) {
            const cur = (existing || '').split(',').map(x => x.trim()).filter(Boolean);
            const inc = (incoming || []).map(t => (typeof t === 'string' ? t : t.name)).filter(Boolean);
            return dedupe([...cur, ...inc]).join(', ');
        }

        function fillForm(u) {
            setVal(SELECTORS.inputs.title, u.title || '');
            setVal(SELECTORS.inputs.authors, normAuthors(u.authors) || u.authorString || '');
            setVal(SELECTORS.inputs.journal, u.journal || u.containerTitle || '');
            setVal(SELECTORS.inputs.year, u.year || u.publishedYear || '');
            setVal(SELECTORS.inputs.volume, u.volume || '');
            setVal(SELECTORS.inputs.pages, u.pages || '');
            setVal(SELECTORS.inputs.doi, u.doi || '');
            
            const nctVal = u.nct || (u.clinicalTrial && u.clinicalTrial.nctId) || '';
            setVal(SELECTORS.inputs.nct, nctVal);
            
            if (u.clinicalTrial) fillTrial(u.clinicalTrial);
            
            // DO NOT auto-populate tags - let user click to add them
            renderChips(u.tags || u.mesh);
        }

        function addRequestRow(u) {
            const requestData = {
                title: u.title || 'Enriched Request',
                authors: normAuthors(u.authors) || '',
                journal: u.journal || '',
                year: u.year || '',
                volume: u.volume || '',
                pages: u.pages || '',
                pmid: u.pmid || '',
                doi: u.doi || '',
                nct: u.nct || '',
                patronEmail: getVal(SELECTORS.inputs.patron) || '',
                docline: getVal(SELECTORS.inputs.docline) || '',
                priority: getVal(SELECTORS.inputs.priority) || 'normal',
                status: getVal(SELECTORS.inputs.status) || 'order',
                tags: mergeTagsText('', u.tags || u.mesh),
                notes: u.clinicalTrial ? `Clinical trial: ${u.clinicalTrial.nctId || u.nct}` : ''
            };
            
            saveRequest(requestData);
        }

        async function route(token, kind) {
            try {
                let res;
                if (kind === 'pmid') {
                    res = await engine.enrichPMID(token);
                } else if (kind === 'doi') {
                    res = await engine.enrichDOI(token);
                } else if (kind === 'nct') {
                    res = await engine.enrichNCT(token);
                }
                
                const u = res?.unified || res?.pubmed || res?.crossref || 
                         (res?.clinicalTrial ? { clinicalTrial: res.clinicalTrial, nct: res.clinicalTrial.nctId } : {}) || {};
                
                fillForm(u);
                addRequestRow(u);
                return { success: true, hasNCT: !!(u.nct || u.clinicalTrial) };
            } catch (e) {
                console.error('Enrichment failed:', kind, token, e);
                return { success: false, error: e.message };
            }
        }

        // =============================================================================
        // ENHANCED SEARCH WITH FUSE.JS
        // =============================================================================

        function initializeFuseSearch() {
            const fuseOptions = {
                keys: [
                    { name: 'title', weight: 0.3 },
                    { name: 'authors', weight: 0.2 },
                    { name: 'journal', weight: 0.1 },
                    { name: 'patronEmail', weight: 0.2 },
                    { name: 'tags', weight: 0.1 },
                    { name: 'notes', weight: 0.05 },
                    { name: 'id', weight: 0.05 }
                ],
                threshold: 0.4,
                includeScore: true,
                minMatchCharLength: 2
            };
            
            APP_STATE.fuse = new Fuse(APP_STATE.requests, fuseOptions);
        }

        function performFuzzySearch(query) {
            if (!query.trim() || !APP_STATE.fuse) {
                return APP_STATE.requests;
            }
            
            const results = APP_STATE.fuse.search(query);
            return results.map(result => result.item);
        }

        // =============================================================================
        // CSV HANDLING WITH PAPAPARSE
        // =============================================================================

        function parseCSVFile(file) {
            return new Promise((resolve, reject) => {
                Papa.parse(file, {
                    header: true,
                    skipEmptyLines: true,
                    dynamicTyping: true,
                    complete: function(results) {
                        if (results.errors.length > 0) {
                            console.warn('CSV parsing errors:', results.errors);
                        }
                        resolve(results.data);
                    },
                    error: function(error) {
                        reject(error);
                    }
                });
            });
        }

        function sanitizeAndValidateCSVData(csvData) {
            return csvData.map(row => {
                const cleanRow = {};
                
                Object.keys(row).forEach(key => {
                    let value = row[key];
                    
                    // Handle null/undefined/empty values
                    if (value === null || value === undefined || value === '') {
                        cleanRow[key] = '';
                        return;
                    }
                    
                    // Convert to string and clean
                    value = String(value).trim();
                    
                    // Specific field cleaning
                    switch(key.toLowerCase().replace(/\s+/g, '')) {
                        case 'priority':
                        case 'urgency':
                            // Map non-standard priority values
                            const priorityMap = {
                                'rush': 'urgent',
                                'high': 'high',
                                'medium': 'normal',
                                'low': 'low',
                                'normal': 'normal',
                                'urgent': 'urgent',
                                'immediate': 'urgent',
                                'routine': 'normal'
                            };
                            cleanRow[key] = priorityMap[value.toLowerCase()] || 'normal';
                            break;
                            
                        case 'status':
                        case 'fillstatus':
                            // Map status values
                            const statusMap = {
                                'pending': 'order',
                                'ordered': 'order',
                                'order': 'order',
                                'received': 'received',
                                'processing': 'processing',
                                'complete': 'completed',
                                'completed': 'completed',
                                'done': 'completed',
                                'cancelled': 'cancelled',
                                'canceled': 'cancelled'
                            };
                            cleanRow[key] = statusMap[value.toLowerCase()] || 'order';
                            break;
                            
                        case 'title':
                            // Truncate very long titles
                            cleanRow[key] = value.length > 500 ? value.substring(0, 500) + '...' : value;
                            break;
                            
                        case 'authors':
                            // Clean up author formatting
                            cleanRow[key] = value.replace(/\s*;\s*/g, '; ').replace(/\s*,\s*/g, ', ');
                            break;
                            
                        case 'pmid':
                            // Validate PMID format
                            const pmidMatch = value.match(/\d{6,9}/);
                            cleanRow[key] = pmidMatch ? pmidMatch[0] : '';
                            break;
                            
                        case 'doi':
                            // Clean DOI format
                            const doiMatch = value.match(/10\.[^\s"']+/);
                            cleanRow[key] = doiMatch ? doiMatch[0] : '';
                            break;
                            
                        case 'nct':
                            // Clean NCT format
                            const nctMatch = value.match(/NCT\d{8}/i);
                            cleanRow[key] = nctMatch ? nctMatch[0].toUpperCase() : '';
                            break;
                            
                        case 'email':
                        case 'patronemail':
                            // Basic email validation
                            const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                            cleanRow[key] = emailPattern.test(value) ? value.toLowerCase() : '';
                            break;
                            
                        case 'year':
                            // Validate year
                            const yearMatch = value.match(/\b(19|20)\d{2}\b/);
                            cleanRow[key] = yearMatch ? yearMatch[0] : '';
                            break;
                            
                        default:
                            cleanRow[key] = value;
                    }
                });
                
                return cleanRow;
            });
        }

        function extractIdentifiersFromCSV(csvData) {
            // First, sanitize the data
            const cleanedData = sanitizeAndValidateCSVData(csvData);
            const identifiers = [];
            
            // Check for recognized column headers (case insensitive)
            const headers = Object.keys(cleanedData[0] || {}).map(h => h.toLowerCase().replace(/\s+/g, ''));
            const pmidColumns = headers.filter(h => ['pmid', 'pubmedid', 'pm_id'].includes(h));
            const doiColumns = headers.filter(h => ['doi'].includes(h));
            const nctColumns = headers.filter(h => ['nct', 'nctid', 'clinicaltrialsid'].includes(h));
            
            cleanedData.forEach((row, index) => {
                let hasIdentifier = false;
                
                // Extract from designated columns if headers found
                pmidColumns.forEach(col => {
                    const originalCol = Object.keys(row).find(k => k.toLowerCase().replace(/\s+/g, '') === col);
                    if (row[originalCol] && /^\d{6,9}$/.test(String(row[originalCol]))) {
                        identifiers.push({ 
                            token: String(row[originalCol]), 
                            kind: 'pmid',
                            rowData: row,
                            rowIndex: index
                        });
                        hasIdentifier = true;
                    }
                });
                
                doiColumns.forEach(col => {
                    const originalCol = Object.keys(row).find(k => k.toLowerCase().replace(/\s+/g, '') === col);
                    if (row[originalCol] && /^10\.[^\s"']+$/.test(String(row[originalCol]))) {
                        identifiers.push({ 
                            token: String(row[originalCol]), 
                            kind: 'doi',
                            rowData: row,
                            rowIndex: index
                        });
                        hasIdentifier = true;
                    }
                });
                
                nctColumns.forEach(col => {
                    const originalCol = Object.keys(row).find(k => k.toLowerCase().replace(/\s+/g, '') === col);
                    if (row[originalCol] && /^NCT\d{8}$/i.test(String(row[originalCol]))) {
                        identifiers.push({ 
                            token: String(row[originalCol]).toUpperCase(), 
                            kind: 'nct',
                            rowData: row,
                            rowIndex: index
                        });
                        hasIdentifier = true;
                    }
                });
                
                // If no identifiers found but row has data, create a generic record
                if (!hasIdentifier && (row.title || row.authors)) {
                    identifiers.push({
                        token: `MANUAL-${Date.now()}-${index}`,
                        kind: 'manual',
                        rowData: row,
                        rowIndex: index
                    });
                }
                
                // If no designated columns found, use regex fallback on all values
                if (pmidColumns.length === 0 && doiColumns.length === 0 && nctColumns.length === 0) {
                    Object.values(row).forEach(value => {
                        if (!value) return;
                        const str = String(value);
                        
                        // Check for PMID
                        const pmidMatch = str.match(/\b\d{6,9}\b/);
                        if (pmidMatch) {
                            identifiers.push({ 
                                token: pmidMatch[0], 
                                kind: 'pmid',
                                rowData: row,
                                rowIndex: index
                            });
                        }
                        
                        // Check for DOI
                        const doiMatch = str.match(/\b10\.[^\s"']+\b/);
                        if (doiMatch) {
                            identifiers.push({ 
                                token: doiMatch[0], 
                                kind: 'doi',
                                rowData: row,
                                rowIndex: index
                            });
                        }
                        
                        // Check for NCT
                        const nctMatch = str.match(/\bNCT\d{8}\b/i);
                        if (nctMatch) {
                            identifiers.push({ 
                                token: nctMatch[0].toUpperCase(), 
                                kind: 'nct',
                                rowData: row,
                                rowIndex: index
                            });
                        }
                    });
                }
            });
            
            // Deduplicate while preserving order
            const seen = new Set();
            return identifiers.filter(item => {
                const key = `${item.kind}:${item.token}`;
                if (seen.has(key)) return false;
                seen.add(key);
                return true;
            });
        }

        function parseIdentifiers(text) {
            const identifiers = [];
            
            // PMID pattern
            const pmids = text.match(/\b\d{6,9}\b/g) || [];
            pmids.forEach(pmid => identifiers.push({ token: pmid, kind: 'pmid' }));
            
            // DOI pattern
            const dois = text.match(/\b10\.[^\s"']+\b/g) || [];
            dois.forEach(doi => identifiers.push({ token: doi, kind: 'doi' }));
            
            // NCT pattern
            const ncts = text.match(/\bNCT\d{8}\b/gi) || [];
            ncts.forEach(nct => identifiers.push({ token: nct.toUpperCase(), kind: 'nct' }));

            // Deduplicate
            const seen = new Set();
            return identifiers.filter(item => {
                const key = `${item.kind}:${item.token}`;
                if (seen.has(key)) return false;
                seen.add(key);
                return true;
            });
        }

        // =============================================================================
        // BULK OPERATIONS WITH REAL ENRICHMENT
        // =============================================================================

        async function processBulkPaste() {
            const textarea = $(SELECTORS.bulk.paste_textarea);
            if (!textarea) return;
            
            const text = textarea.value || '';
            const tokens = text.match(/\b(NCT\d{8}|10\.[^\s"']+|\d{6,9})\b/gi) || [];
            
            if (tokens.length === 0) {
                announceToScreenReader('No valid identifiers found');
                return;
            }

            const seen = new Set();
            const queue = [];
            
            for (const t of tokens) {
                const token = t.trim();
                if (seen.has(token)) continue;
                seen.add(token);
                
                const kind = /^NCT/i.test(token) ? 'nct' : /^10\./.test(token) ? 'doi' : 'pmid';
                queue.push({ token, kind });
            }

            announceToScreenReader(`Processing ${queue.length} identifiers...`);
            
            let processed = 0;
            for (const { token, kind } of queue) {
                try {
                    await route(token, kind);
                    processed++;
                    announceToScreenReader(`Processed ${processed}/${queue.length}: ${token}`);
                } catch (error) {
                    console.error('Failed to process:', token, error);
                }
                
                // Rate limiting
                await new Promise(r => setTimeout(r, 500));
            }

            announceToScreenReader(`Bulk paste complete: ${processed} requests created`);
            textarea.value = '';
        }

        async function processBulkUpload() {
            const fileInput = $(SELECTORS.bulk.upload_input);
            const file = fileInput?.files?.[0];
            
            if (!file) {
                announceToScreenReader('Please select a file first');
                return;
            }
            
            try {
                let identifiers = [];
                
                if (file.name.toLowerCase().endsWith('.csv')) {
                    announceToScreenReader('Processing CSV file...');
                    const csvData = await parseCSVFile(file);
                    identifiers = extractIdentifiersFromCSV(csvData);
                    
                    // Show data cleaning summary
                    const cleanedCount = identifiers.filter(i => i.rowData).length;
                    if (cleanedCount > 0) {
                        announceToScreenReader(`Data cleaning applied to ${cleanedCount} records. Priority values like 'rush' normalized to 'urgent'.`);
                    }
                } else if (file.name.toLowerCase().endsWith('.json')) {
                    announceToScreenReader('Processing JSON file...');
                    const text = await file.text();
                    const json = JSON.parse(text);
                    
                    // Support various JSON formats
                    if (json.pmids) identifiers.push(...json.pmids.map(p => ({ token: String(p), kind: 'pmid' })));
                    if (json.dois) identifiers.push(...json.dois.map(d => ({ token: String(d), kind: 'doi' })));
                    if (json.ncts) identifiers.push(...json.ncts.map(n => ({ token: String(n), kind: 'nct' })));
                    
                    // Array of objects format
                    if (Array.isArray(json)) {
                        json.forEach(item => {
                            if (item.pmid) identifiers.push({ token: String(item.pmid), kind: 'pmid' });
                            if (item.doi) identifiers.push({ token: String(item.doi), kind: 'doi' });
                            if (item.nct) identifiers.push({ token: String(item.nct), kind: 'nct' });
                        });
                    }
                } else {
                    // TXT file - regex extraction
                    announceToScreenReader('Processing text file...');
                    const text = await file.text();
                    identifiers = parseIdentifiers(text);
                }
                
                if (identifiers.length === 0) {
                    announceToScreenReader('No valid identifiers found in file');
                    return;
                }
                
                announceToScreenReader(`Found ${identifiers.length} identifiers. Processing...`);
                
                let processed = 0;
                for (const item of identifiers) {
                    try {
                        // For manual entries or rows with existing data, create directly
                        if (item.kind === 'manual' || item.rowData) {
                            const requestData = createRequestFromRowData(item);
                            if (requestData) {
                                saveRequest(requestData);
                                processed++;
                            }
                        } else {
                            // For identifiers only, do enrichment lookup
                            await route(item.token.trim(), item.kind);
                            processed++;
                        }
                        announceToScreenReader(`Processed ${processed}/${identifiers.length}: ${item.token}`);
                    } catch (error) {
                        console.error('Failed to process:', item.token, error);
                    }
                    
                    // Rate limiting
                    await new Promise(r => setTimeout(r, 300));
                }
                
                announceToScreenReader(`Bulk upload complete: ${processed} requests created`);
                fileInput.value = ''; // Clear file input
                
            } catch (error) {
                console.error('Bulk upload failed:', error);
                announceToScreenReader('Bulk upload failed: ' + error.message);
            }
        }

        function createRequestFromRowData(item) {
            if (!item.rowData) return null;
            
            const row = item.rowData;
            
            // Map CSV columns to request fields
            const requestData = {
                title: row.title || row.Title || 'Imported Record',
                authors: row.authors || row.Authors || '',
                journal: row.journal || row.Journal || '',
                year: row.year || row.Year || '',
                volume: row.volume || row.Volume || '',
                pages: row.pages || row.Pages || '',
                pmid: row.pmid || row.PMID || (item.kind === 'pmid' ? item.token : ''),
                doi: row.doi || row.DOI || (item.kind === 'doi' ? item.token : ''),
                nct: row.nct || row.NCT || (item.kind === 'nct' ? item.token : ''),
                patronEmail: row.patronemail || row.PatronEmail || row.email || row.Email || '',
                docline: row.docline || row.DOCLINE || '',
                priority: row.priority || row.Priority || row.urgency || row.Urgency || 'normal',
                status: row.status || row.Status || row.fillstatus || row.FillStatus || 'order',
                tags: row.tags || row.Tags || '',
                notes: row.notes || row.Notes || `Imported from CSV (row ${item.rowIndex + 1})`
            };
            
            return requestData;
        }

        // =============================================================================
        // UI MANAGEMENT
        // =============================================================================

        function showTab(tabId) {
            // Update nav
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            const activeTab = document.querySelector(`[data-tab="${tabId}"]`);
            if (activeTab) {
                activeTab.classList.add('active');
            }

            // Update content
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            const activeContent = document.getElementById(tabId);
            if (activeContent) {
                activeContent.classList.add('active');
            }

            // Close sidebar on mobile
            if (window.innerWidth < 1024) {
                document.getElementById('sidebar').classList.remove('open');
            }

            announceToScreenReader(`Switched to ${tabId.replace('-', ' ')} tab`);
        }

        function toggleSidebar() {
            document.getElementById('sidebar').classList.toggle('open');
        }

        function announceToScreenReader(message) {
            document.getElementById('ss-live').textContent = message;
        }

        // =============================================================================
        // BULK OPERATIONS UI
        // =============================================================================

        function updateBulkActions() {
            const selected = APP_STATE.selectedRequests.size;
            const bulkActions = document.getElementById('bulkActions');
            const bulkActionsText = document.getElementById('bulkActionsText');
            
            if (selected > 0) {
                bulkActions.classList.add('show');
                bulkActionsText.textContent = `${selected} selected`;
            } else {
                bulkActions.classList.remove('show');
            }
        }

        function selectAllRequests() {
            const checkboxes = document.querySelectorAll('tbody input[type="checkbox"]');
            const selectAll = document.getElementById('selectAll');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
                if (selectAll.checked) {
                    APP_STATE.selectedRequests.add(checkbox.value);
                } else {
                    APP_STATE.selectedRequests.delete(checkbox.value);
                }
            });
            
            updateBulkActions();
        }

        function selectRequest(requestId, checked) {
            if (checked) {
                APP_STATE.selectedRequests.add(requestId);
            } else {
                APP_STATE.selectedRequests.delete(requestId);
            }
            
            // Update select all checkbox
            const totalCheckboxes = document.querySelectorAll('tbody input[type="checkbox"]').length;
            const selectAll = document.getElementById('selectAll');
            
            if (APP_STATE.selectedRequests.size === totalCheckboxes && totalCheckboxes > 0) {
                selectAll.checked = true;
                selectAll.indeterminate = false;
            } else if (APP_STATE.selectedRequests.size > 0) {
                selectAll.checked = false;
                selectAll.indeterminate = true;
            } else {
                selectAll.checked = false;
                selectAll.indeterminate = false;
            }
            
            updateBulkActions();
        }

        function bulkDeleteRequests() {
            if (APP_STATE.selectedRequests.size === 0) return;
            
            if (!confirm(`Are you sure you want to delete ${APP_STATE.selectedRequests.size} selected request(s)?`)) {
                return;
            }
            
            APP_STATE.requests = APP_STATE.requests.filter(req => !APP_STATE.selectedRequests.has(req.id));
            localStorage.setItem('silentStacks_requests', JSON.stringify(APP_STATE.requests));
            
            APP_STATE.selectedRequests.clear();
            updateBulkActions();
            renderRequests();
            updateDashboardStats();
            
            announceToScreenReader('Selected requests deleted');
        }

        function bulkEditRequests() {
            if (APP_STATE.selectedRequests.size === 0) return;
            
            // For now, just show an alert - this would open a bulk edit modal in full implementation
            alert(`Bulk edit functionality for ${APP_STATE.selectedRequests.size} requests would be implemented here`);
        }

        function cancelBulkSelection() {
            APP_STATE.selectedRequests.clear();
            document.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                cb.checked = false;
                cb.indeterminate = false;
            });
            updateBulkActions();
        }

        // =============================================================================
        // BASIC REQUEST MANAGEMENT
        // =============================================================================

        function generateRequestId() {
            return `ILL-${String(requestIdCounter++).padStart(4, '0')}`;
        }

        function saveRequest(requestData) {
            // Validate DOCLINE uniqueness
            if (requestData.docline && !validateDoclineUnique(requestData.docline)) {
                announceToScreenReader('Error: DOCLINE number already exists');
                alert('DOCLINE number already exists. Please use a unique DOCLINE number.');
                return null;
            }

            const request = {
                id: generateRequestId(),
                ...requestData,
                created: new Date().toISOString(),
                updated: new Date().toISOString()
            };

            APP_STATE.requests.unshift(request);
            localStorage.setItem('silentStacks_requests', JSON.stringify(APP_STATE.requests));
            localStorage.setItem('silentStacks_counter', requestIdCounter.toString());
            
            updateDashboardStats();
            renderRequests();
            announceToScreenReader('Request saved successfully');
            
            return request;
        }

        function deleteRequest(id) {
            if (!confirm('Are you sure you want to delete this request?')) return;

            APP_STATE.requests = APP_STATE.requests.filter(req => req.id !== id);
            localStorage.setItem('silentStacks_requests', JSON.stringify(APP_STATE.requests));
            
            updateDashboardStats();
            renderRequests();
            announceToScreenReader('Request deleted');
        }

        // =============================================================================
        // DATA DISPLAY
        // =============================================================================

        function renderRequests() {
            const filteredRequests = filterRequests(APP_STATE.requests);
            const sortedRequests = sortRequests(filteredRequests);

            if (APP_STATE.currentView === 'table') {
                renderTableView(sortedRequests);
            } else {
                renderCardsView(sortedRequests);
            }
        }

        function filterRequests(requests) {
            const searchTerm = document.getElementById('searchInput')?.value || '';
            const statusFilter = document.getElementById('statusFilter')?.value || '';
            const priorityFilter = document.getElementById('priorityFilter')?.value || '';
            
            let filteredRequests = requests;
            
            // Use fuzzy search if search term provided
            if (searchTerm.trim()) {
                filteredRequests = performFuzzySearch(searchTerm);
            }
            
            // Apply additional filters
            return filteredRequests.filter(request => {
                const matchesStatus = !statusFilter || request.status === statusFilter;
                const matchesPriority = !priorityFilter || request.priority === priorityFilter;
                return matchesStatus && matchesPriority;
            });
        }

        function sortRequests(requests) {
            const { field, direction } = APP_STATE.currentSort;
            
            return [...requests].sort((a, b) => {
                let aVal = a[field] || '';
                let bVal = b[field] || '';

                if (field === 'created' || field === 'updated') {
                    aVal = new Date(aVal);
                    bVal = new Date(bVal);
                }

                if (aVal < bVal) return direction === 'asc' ? -1 : 1;
                if (aVal > bVal) return direction === 'asc' ? 1 : -1;
                return 0;
            });
        }

        function formatCitation(request) {
            let citation = '';
            
            // Authors (abbreviated)
            if (request.authors) {
                const authorList = request.authors.split(';').slice(0, 3);
                citation += authorList.join(', ');
                if (authorList.length >= 3) citation += ', et al';
                citation += '. ';
            }
            
            // Title (truncated)
            if (request.title) {
                const title = request.title.length > 80 ? request.title.substring(0, 80) + '...' : request.title;
                citation += title + '. ';
            }
            
            // Journal and year
            if (request.journal) {
                citation += request.journal + '. ';
            }
            if (request.year) {
                citation += request.year + '.';
            }
            
            return citation.trim();
        }

        function validateDoclineUnique(docline, currentId = null) {
            if (!docline) return true; // Allow empty
            
            return !APP_STATE.requests.some(req => 
                req.docline === docline && req.id !== currentId
            );
        }

        function renderTableView(requests) {
            const tbody = document.querySelector('#requests-table tbody');
            if (!tbody) return;

            tbody.innerHTML = '';

            requests.forEach(request => {
                const row = document.createElement('tr');
                const citation = formatCitation(request);
                const lastUpdated = new Date(request.updated || request.created).toLocaleDateString();
                
                row.innerHTML = `
                    <td class="checkbox-cell">
                        <input type="checkbox" value="${request.id}" onchange="selectRequest('${request.id}', this.checked)">
                    </td>
                    <td><span class="priority-badge ${request.priority || 'normal'}">${(request.priority || 'normal').toUpperCase()}</span></td>
                    <td>${request.docline || 'N/A'}</td>
                    <td>${request.pmid || 'N/A'}</td>
                    <td title="${request.title || 'Untitled'}">${citation || 'No citation available'}</td>
                    <td>${request.patronEmail || 'N/A'}</td>
                    <td><span class="status-badge ${request.status || 'order'}">${request.status || 'order'}</span></td>
                    <td>${lastUpdated}</td>
                    <td>
                        <button class="btn btn-sm btn-secondary" onclick="editRequest('${request.id}')">Edit</button>
                        <button class="btn btn-sm btn-danger" onclick="deleteRequest('${request.id}')">Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function renderCardsView(requests) {
            const container = document.getElementById('cardsView');
            if (!container) return;

            container.innerHTML = '';

            requests.forEach(request => {
                const card = document.createElement('div');
                card.className = 'request-card';
                const lastUpdated = new Date(request.updated || request.created).toLocaleDateString();
                card.innerHTML = `
                    <div class="request-header">
                        <span class="request-id">${request.id}</span>
                        <span class="status-badge ${request.status || 'order'}">${request.status || 'order'}</span>
                    </div>
                    <h3 class="request-title">${request.title || 'Untitled'}</h3>
                    <div class="request-meta">
                        <div><strong>Patron:</strong> ${request.patronEmail || 'N/A'}</div>
                        <div><strong>DOCLINE #:</strong> ${request.docline || 'N/A'}</div>
                        <div><strong>PMID:</strong> ${request.pmid || 'N/A'}</div>
                        <div><strong>Journal:</strong> ${request.journal || 'N/A'}</div>
                        <div><strong>Year:</strong> ${request.year || 'N/A'}</div>
                        <div><strong>Urgency:</strong> <span class="priority-badge ${request.priority || 'normal'}">${(request.priority || 'normal').toUpperCase()}</span></div>
                        <div><strong>Last Updated:</strong> ${lastUpdated}</div>
                    </div>
                    <div class="request-actions">
                        <button class="btn btn-sm btn-secondary" onclick="editRequest('${request.id}')">Edit</button>
                        <button class="btn btn-sm btn-danger" onclick="deleteRequest('${request.id}')">Delete</button>
                    </div>
                `;
                container.appendChild(card);
            });
        }

        function sortTable(field) {
            if (APP_STATE.currentSort.field === field) {
                APP_STATE.currentSort.direction = APP_STATE.currentSort.direction === 'asc' ? 'desc' : 'asc';
            } else {
                APP_STATE.currentSort = { field, direction: 'asc' };
            }

            // Update sort indicators
            document.querySelectorAll('[id^="sort-"]').forEach(el => {
                el.textContent = '↕️';
            });
            
            const indicator = document.getElementById(`sort-${field}`);
            if (indicator) {
                indicator.textContent = APP_STATE.currentSort.direction === 'asc' ? '↑' : '↓';
            }

            renderRequests();
        }

        function editRequest(id) {
            const request = APP_STATE.requests.find(req => req.id === id);
            if (!request) return;

            // Populate form with request data
            Object.keys(request).forEach(key => {
                const element = document.getElementById(key === 'patronEmail' ? 'patron-email' : key);
                if (element && request[key] !== undefined) {
                    element.value = request[key];
                }
            });

            // Switch to add request tab for editing
            showTab('add-request');
            
            // Store the ID for updating instead of creating new
            document.getElementById('requestForm').dataset.editId = id;
            
            announceToScreenReader(`Editing request ${id}`);
        }

        // =============================================================================
        // EXPORT FUNCTIONALITY
        // =============================================================================

        function exportToCSV() {
            const headers = ['Urgency', 'DOCLINE #', 'PMID', 'Citation', 'Patron e-mail', 'Fill Status', 'Time Stamp of Last Update'];
            const rows = APP_STATE.requests.map(req => [
                req.priority || 'normal',
                req.docline || 'N/A', 
                req.pmid || 'N/A',
                formatCitation(req) || 'No citation available',
                req.patronEmail || 'N/A',
                req.status || 'order',
                req.updated || req.created || 'N/A'
            ]);

            const csv = Papa.unparse({
                fields: headers,
                data: rows
            });

            downloadFile('silentstacks-requests.csv', csv, 'text/csv');
            announceToScreenReader('CSV export downloaded');
        }

        function exportToJSON() {
            // Clean data with no null values
            const cleanedRequests = APP_STATE.requests.map(req => ({
                id: req.id || 'N/A',
                urgency: req.priority || 'normal',
                docline: req.docline || 'N/A',
                pmid: req.pmid || 'N/A',
                citation: formatCitation(req) || 'No citation available',
                patronEmail: req.patronEmail || 'N/A',
                fillStatus: req.status || 'order',
                lastUpdated: req.updated || req.created || 'N/A',
                title: req.title || 'Untitled',
                authors: req.authors || 'N/A',
                journal: req.journal || 'N/A',
                year: req.year || 'N/A',
                volume: req.volume || 'N/A',
                pages: req.pages || 'N/A',
                doi: req.doi || 'N/A',
                nct: req.nct || 'N/A',
                tags: req.tags || 'N/A',
                notes: req.notes || 'N/A',
                created: req.created || 'N/A'
            }));
            
            const jsonContent = JSON.stringify(cleanedRequests, null, 2);
            downloadFile('silentstacks-requests.json', jsonContent, 'application/json');
            announceToScreenReader('JSON export downloaded');
        }

        function downloadFile(filename, content, mimeType) {
            const blob = new Blob([content], { type: mimeType });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function exportToNLM() {
            if (APP_STATE.requests.length === 0) {
                announceToScreenReader('No requests to export');
                return;
            }

            const nlmCitations = APP_STATE.requests.map(req => {
                // Strict NLM Citation Format with no null values
                let citation = '';
                
                // Authors (Last Name First Initial, Second Author First Initial Last Name, etc.)
                if (req.authors && req.authors !== 'N/A') {
                    const authorList = req.authors.split(';').map(author => author.trim()).slice(0, 6);
                    if (authorList.length > 0) {
                        citation += authorList.join(', ');
                        if (authorList.length > 6) citation += ', et al';
                        citation += '. ';
                    }
                } else {
                    citation += '[No authors listed]. ';
                }
                
                // Title (sentence case, no period if ends with punctuation)
                if (req.title && req.title !== 'N/A' && req.title !== 'Untitled') {
                    let title = req.title.trim();
                    if (!title.match(/[.!?]$/)) title += '.';
                    citation += title + ' ';
                } else {
                    citation += '[Title not available]. ';
                }
                
                // Journal (abbreviated if possible)
                if (req.journal && req.journal !== 'N/A') {
                    citation += req.journal + '. ';
                } else {
                    citation += '[Journal not specified]. ';
                }
                
                // Year
                if (req.year && req.year !== 'N/A') {
                    citation += req.year;
                } else {
                    citation += '[Year not available]';
                }
                
                // Volume and issue
                if (req.volume && req.volume !== 'N/A') {
                    citation += ';' + req.volume;
                }
                
                // Pages
                if (req.pages && req.pages !== 'N/A') {
                    citation += ':' + req.pages;
                }
                
                citation += '.';
                
                // DOI if available
                if (req.doi && req.doi !== 'N/A') {
                    citation += ' doi: ' + req.doi + '.';
                }
                
                // PMID if available
                if (req.pmid && req.pmid !== 'N/A') {
                    citation += ' PMID: ' + req.pmid + '.';
                }
                
                return citation;
            }).join('\n\n');

            downloadFile('silentstacks-nlm-citations.txt', nlmCitations, 'text/plain');
            announceToScreenReader('NLM citations exported');
        }

        // =============================================================================
        // DASHBOARD STATS (Updated for new labels)
        // =============================================================================

        function updateDashboardStats() {
            const total = APP_STATE.requests.length;
            const pending = APP_STATE.requests.filter(r => r.status === 'order').length;
            const inProgress = APP_STATE.requests.filter(r => r.status === 'received' || r.status === 'processing').length;
            const completed = APP_STATE.requests.filter(r => r.status === 'completed').length;
            
            document.getElementById('totalRequests').textContent = total;
            document.getElementById('pendingRequests').textContent = pending;
            document.getElementById('inProgressRequests').textContent = inProgress;
            document.getElementById('completedRequests').textContent = completed;
        }

        // =============================================================================
        // EVENT LISTENERS AND INITIALIZATION
        // =============================================================================

        document.addEventListener('DOMContentLoaded', function() {
            // Navigation - Fixed to ensure proper tab switching
            document.getElementById('navToggle').addEventListener('click', toggleSidebar);
            
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.addEventListener('click', (e) => {
                    e.preventDefault();
                    const tabId = tab.getAttribute('data-tab');
                    if (tabId) {
                        showTab(tabId);
                    }
                });
            });

            // Single request lookups
            $(SELECTORS.buttons.lookup_pmid)?.addEventListener('click', async () => {
                const v = getVal(SELECTORS.inputs.pmid).trim();
                if (!/^\d{6,9}$/.test(v)) {
                    say(SELECTORS.status_regions.pmid, 'PMID must be 6–9 digits.');
                    return;
                }
                say(SELECTORS.status_regions.pmid, 'Looking up…');
                const result = await route(v, 'pmid');
                say(SELECTORS.status_regions.pmid, result.success ? (result.hasNCT ? 'Done • NCT linked' : 'Done') : 'Failed');
                if (result.success) {
                    announceToScreenReader(`PMID ${v} enrichment complete${result.hasNCT ? ' with clinical trial data' : ''}`);
                }
            });

            $(SELECTORS.buttons.lookup_doi)?.addEventListener('click', async () => {
                const v = getVal(SELECTORS.inputs.doi).trim();
                if (!v) {
                    say(SELECTORS.status_regions.doi, 'Enter DOI');
                    return;
                }
                say(SELECTORS.status_regions.doi, 'Looking up…');
                const result = await route(v, 'doi');
                say(SELECTORS.status_regions.doi, result.success ? 'Done' : 'Failed');
                if (result.success) {
                    announceToScreenReader(`DOI ${v} enrichment complete`);
                }
            });

            $(SELECTORS.buttons.lookup_nct)?.addEventListener('click', async () => {
                const v = getVal(SELECTORS.inputs.nct).trim();
                if (!/^NCT\d{8}$/i.test(v)) {
                    say(SELECTORS.status_regions.nct, 'Enter NCT########');
                    return;
                }
                say(SELECTORS.status_regions.nct, 'Looking up…');
                const result = await route(v, 'nct');
                say(SELECTORS.status_regions.nct, result.success ? 'Done' : 'Failed');
                if (result.success) {
                    announceToScreenReader(`NCT ${v} enrichment complete`);
                }
            });

            // Bulk operations
            $(SELECTORS.buttons.bulk_paste)?.addEventListener('click', processBulkPaste);
            $(SELECTORS.buttons.bulk_upload)?.addEventListener('click', processBulkUpload);

            // Form submission
            document.getElementById('requestForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const requestData = {
                    title: document.getElementById('title').value,
                    authors: document.getElementById('authors').value,
                    journal: document.getElementById('journal').value,
                    year: document.getElementById('year').value,
                    volume: document.getElementById('volume').value,
                    pages: document.getElementById('pages').value,
                    pmid: document.getElementById('pmid').value,
                    doi: document.getElementById('doi').value,
                    nct: document.getElementById('nct').value,
                    patronEmail: document.getElementById('patron-email').value,
                    docline: document.getElementById('docline').value,
                    priority: document.getElementById('priority').value,
                    status: document.getElementById('status').value,
                    tags: document.getElementById('tags').value,
                    notes: document.getElementById('notes').value
                };

                // Check if editing or creating new
                const editId = this.dataset.editId;
                if (editId) {
                    // Validate DOCLINE uniqueness for edits
                    if (requestData.docline && !validateDoclineUnique(requestData.docline, editId)) {
                        announceToScreenReader('Error: DOCLINE number already exists');
                        alert('DOCLINE number already exists. Please use a unique DOCLINE number.');
                        return;
                    }
                    
                    // Update existing request
                    const requestIndex = APP_STATE.requests.findIndex(req => req.id === editId);
                    if (requestIndex !== -1) {
                        APP_STATE.requests[requestIndex] = {
                            ...APP_STATE.requests[requestIndex],
                            ...requestData,
                            updated: new Date().toISOString()
                        };
                        localStorage.setItem('silentStacks_requests', JSON.stringify(APP_STATE.requests));
                        updateDashboardStats();
                        renderRequests();
                        announceToScreenReader('Request updated successfully');
                    }
                    delete this.dataset.editId;
                } else {
                    // Create new request with validation
                    const result = saveRequest(requestData);
                    if (!result) {
                        return; // Validation failed, saveRequest already showed error
                    }
                }

                // Clear form
                this.reset();
                document.getElementById('gl-chips').classList.add('hidden');
            });

            // Clear form
            document.getElementById('clearForm').addEventListener('click', function() {
                document.getElementById('requestForm').reset();
                document.getElementById('gl-chips').classList.add('hidden');
                delete document.getElementById('requestForm').dataset.editId;
                announceToScreenReader('Form cleared');
            });

            // View toggle
            document.querySelectorAll('.view-toggle button').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.view-toggle button').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    const view = this.dataset.view;
                    APP_STATE.currentView = view;
                    
                    document.getElementById('tableView').classList.toggle('hidden', view !== 'table');
                    document.getElementById('cardsView').classList.toggle('hidden', view !== 'cards');
                    
                    renderRequests();
                    announceToScreenReader(`Switched to ${view} view`);
                });
            });

            // Bulk selection operations
            document.getElementById('selectAll').addEventListener('change', selectAllRequests);
            document.getElementById('bulkDelete').addEventListener('click', bulkDeleteRequests);
            document.getElementById('bulkEdit').addEventListener('click', bulkEditRequests);
            document.getElementById('bulkCancel').addEventListener('click', cancelBulkSelection);

            // Export functionality
            document.getElementById('exportCSV').addEventListener('click', exportToCSV);
            document.getElementById('exportJSON').addEventListener('click', exportToJSON);
            document.getElementById('exportNLM').addEventListener('click', exportToNLM);

            // Settings
            document.getElementById('saveSettings')?.addEventListener('click', function() {
                const settings = {
                    apiKey: document.getElementById('api-key').value,
                    crossrefEmail: document.getElementById('crossref-email').value
                };
                localStorage.setItem('silentStacks_settings', JSON.stringify(settings));
                APP_STATE.settings = settings;
                announceToScreenReader('Settings saved');
            });

            // Enhanced search with debouncing for better performance
            let searchTimeout;
            ['searchInput', 'statusFilter', 'priorityFilter'].forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('input', function() {
                        clearTimeout(searchTimeout);
                        searchTimeout = setTimeout(() => {
                            if (id === 'searchInput') {
                                // Reinitialize Fuse with current data for fresh search
                                initializeFuseSearch();
                            }
                            renderRequests();
                        }, 300); // 300ms debounce
                    });
                }
            });

            // Theme change
            document.getElementById('themeSelect')?.addEventListener('change', function() {
                document.body.setAttribute('data-theme', this.value);
                localStorage.setItem('silentStacks_theme', this.value);
                announceToScreenReader(`Theme changed to ${this.value}`);
            });

            // Load saved theme
            const savedTheme = localStorage.getItem('silentStacks_theme') || 'light';
            document.body.setAttribute('data-theme', savedTheme);
            const themeSelect = document.getElementById('themeSelect');
            if (themeSelect) themeSelect.value = savedTheme;

            // Load saved settings
            const savedSettings = JSON.parse(localStorage.getItem('silentStacks_settings') || '{}');
            if (savedSettings.apiKey) {
                const apiKeyField = document.getElementById('api-key');
                if (apiKeyField) apiKeyField.value = savedSettings.apiKey;
            }
            if (savedSettings.crossrefEmail) {
                const emailField = document.getElementById('crossref-email');
                if (emailField) emailField.value = savedSettings.crossrefEmail;
            }

            // Input restrictions and validation
            document.getElementById('pmid')?.addEventListener('input', function(e) {
                e.target.value = e.target.value.replace(/\D/g, '');
            });

            document.getElementById('nct')?.addEventListener('input', function(e) {
                e.target.value = e.target.value.toUpperCase();
            });

            // DOCLINE validation with visual feedback
            document.getElementById('docline')?.addEventListener('input', function(e) {
                const docline = e.target.value.trim();
                const editId = document.getElementById('requestForm').dataset.editId;
                
                // Remove existing validation classes
                e.target.classList.remove('valid', 'invalid');
                
                if (docline && !validateDoclineUnique(docline, editId)) {
                    e.target.classList.add('invalid');
                    e.target.title = 'DOCLINE number already exists';
                } else if (docline) {
                    e.target.classList.add('valid');
                    e.target.title = 'DOCLINE number is unique';
                } else {
                    e.target.title = '';
                }
            });

            document.getElementById('nct')?.addEventListener('input', function(e) {
                e.target.value = e.target.value.toUpperCase();
            });

            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey || e.metaKey) {
                    switch(e.key) {
                        case 'n':
                            e.preventDefault();
                            showTab('add-request');
                            break;
                        case 'f':
                            e.preventDefault();
                            document.getElementById('searchInput')?.focus();
                            break;
                        case 's':
                            e.preventDefault();
                            const form = document.getElementById('requestForm');
                            if (form && document.getElementById('add-request').classList.contains('active')) {
                                form.dispatchEvent(new Event('submit'));
                            }
                            break;
                    }
                }
                if (e.key === 'F1') {
                    e.preventDefault();
                    showTab('help');
                }
            });

            // Data management functions
            document.getElementById('backupData')?.addEventListener('click', function() {
                const backup = {
                    requests: APP_STATE.requests,
                    settings: APP_STATE.settings,
                    counter: requestIdCounter,
                    timestamp: new Date().toISOString(),
                    version: '2.0'
                };
                const jsonContent = JSON.stringify(backup, null, 2);
                downloadFile(`silentstacks-backup-${new Date().toISOString().split('T')[0]}.json`, jsonContent, 'application/json');
                announceToScreenReader('Backup downloaded');
            });

            document.getElementById('restoreData')?.addEventListener('click', function() {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = '.json';
                input.onchange = function(e) {
                    const file = e.target.files[0];
                    if (!file) return;
                    
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        try {
                            const backup = JSON.parse(e.target.result);
                            if (backup.requests && Array.isArray(backup.requests)) {
                                if (confirm('This will replace all current data. Are you sure?')) {
                                    APP_STATE.requests = backup.requests;
                                    APP_STATE.settings = backup.settings || {};
                                    requestIdCounter = backup.counter || 1;
                                    
                                    localStorage.setItem('silentStacks_requests', JSON.stringify(APP_STATE.requests));
                                    localStorage.setItem('silentStacks_settings', JSON.stringify(APP_STATE.settings));
                                    localStorage.setItem('silentStacks_counter', requestIdCounter.toString());
                                    
                                    updateDashboardStats();
                                    renderRequests();
                                    initializeFuseSearch();
                                    announceToScreenReader('Data restored successfully');
                                }
                            } else {
                                announceToScreenReader('Invalid backup file format');
                            }
                        } catch (error) {
                            announceToScreenReader('Failed to restore backup: ' + error.message);
                        }
                    };
                    reader.readAsText(file);
                };
                input.click();
            });

            document.getElementById('clearData')?.addEventListener('click', function() {
                if (confirm('Are you sure you want to clear all data? This cannot be undone.')) {
                    if (confirm('This will permanently delete all requests and settings. Are you absolutely sure?')) {
                        APP_STATE.requests = [];
                        APP_STATE.settings = {};
                        requestIdCounter = 1;
                        
                        localStorage.removeItem('silentStacks_requests');
                        localStorage.removeItem('silentStacks_settings');
                        localStorage.removeItem('silentStacks_counter');
                        
                        updateDashboardStats();
                        renderRequests();
                        initializeFuseSearch();
                        announceToScreenReader('All data cleared');
                    }
                }
            });

        function validateDataQuality() {
            const issues = [];
            
            APP_STATE.requests.forEach((req, index) => {
                const reqIssues = [];
                
                // Check for missing essential fields
                if (!req.title || req.title === 'N/A' || req.title === 'Untitled') {
                    reqIssues.push('Missing title');
                }
                if (!req.patronEmail || req.patronEmail === 'N/A') {
                    reqIssues.push('Missing patron email');
                }
                if (!req.pmid && !req.doi && !req.nct) {
                    reqIssues.push('No research identifier (PMID/DOI/NCT)');
                }
                
                // Check for data quality issues
                if (req.title && req.title.length < 10) {
                    reqIssues.push('Title suspiciously short');
                }
                if (req.authors && req.authors.length < 3) {
                    reqIssues.push('Authors field very short');
                }
                if (req.year && (parseInt(req.year) < 1900 || parseInt(req.year) > new Date().getFullYear() + 1)) {
                    reqIssues.push('Year out of reasonable range');
                }
                
                // Check for duplicate DOCLINEs
                if (req.docline && req.docline !== 'N/A') {
                    const duplicates = APP_STATE.requests.filter(r => r.docline === req.docline);
                    if (duplicates.length > 1) {
                        reqIssues.push('Duplicate DOCLINE number');
                    }
                }
                
                if (reqIssues.length > 0) {
                    issues.push({
                        id: req.id,
                        title: req.title || 'Untitled',
                        issues: reqIssues
                    });
                }
            });
            
            return issues;
        }

        function showDataQualityReport(issues) {
            const totalRecords = APP_STATE.requests.length;
            const recordsWithIssues = issues.length;
            const cleanRecords = totalRecords - recordsWithIssues;
            
            let report = `DATA QUALITY REPORT\n`;
            report += `Generated: ${new Date().toLocaleString()}\n\n`;
            report += `SUMMARY:\n`;
            report += `Total Records: ${totalRecords}\n`;
            report += `Clean Records: ${cleanRecords} (${Math.round(cleanRecords/totalRecords*100)}%)\n`;
            report += `Records with Issues: ${recordsWithIssues} (${Math.round(recordsWithIssues/totalRecords*100)}%)\n\n`;
            
            if (issues.length > 0) {
                report += `DETAILED ISSUES:\n`;
                report += `${'='.repeat(50)}\n`;
                
                issues.forEach((item, index) => {
                    report += `\n${index + 1}. Record ID: ${item.id}\n`;
                    report += `   Title: ${item.title}\n`;
                    report += `   Issues:\n`;
                    item.issues.forEach(issue => {
                        report += `   - ${issue}\n`;
                    });
                });
            } else {
                report += `✅ No data quality issues found!\n`;
            }
            
            // Download as text file
            downloadFile('data-quality-report.txt', report, 'text/plain');
            announceToScreenReader(`Data quality report generated: ${recordsWithIssues} records have issues`);
        }
                const printWindow = window.open('', '_blank');
                const printContent = `
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>SilentStacks Requests Report</title>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            h1 { color: #333; }
                            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f2f2f2; }
                            .status-badge { padding: 2px 6px; border-radius: 3px; font-size: 0.8em; }
                            .order { background: #fffbeb; color: #92400e; }
                            .received { background: #eff6ff; color: #1e40af; }
                            .processing { background: #fef3c7; color: #d97706; }
                            .completed { background: #f0fdf4; color: #166534; }
                            .cancelled { background: #fef2f2; color: #991b1b; }
                        </style>
                    </head>
                    <body>
                        <h1>SilentStacks Requests Report</h1>
                        <p>Generated: ${new Date().toLocaleString()}</p>
                        <p>Total Requests: ${APP_STATE.requests.length}</p>
                        <table>
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Title</th>
                                    <th>Authors</th>
                                    <th>Journal</th>
                                    <th>Year</th>
                                    <th>Patron</th>
                                    <th>Status</th>
                                    <th>Priority</th>
                                    <th>Created</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${APP_STATE.requests.map(req => `
                                    <tr>
                                        <td>${req.id || ''}</td>
                                        <td>${req.title || 'Untitled'}</td>
                                        <td>${req.authors || ''}</td>
                                        <td>${req.journal || ''}</td>
                                        <td>${req.year || ''}</td>
                                        <td>${req.patronEmail || ''}</td>
                                        <td><span class="status-badge ${req.status || 'order'}">${req.status || 'order'}</span></td>
                                        <td>${req.priority || 'normal'}</td>
                                        <td>${new Date(req.created).toLocaleDateString()}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </body>
                    </html>
                `;
                printWindow.document.write(printContent);
                printWindow.document.close();
                printWindow.print();
                announceToScreenReader('Print dialog opened');
            });

            // Initialize data and enhanced search
            initializeFuseSearch();
            updateDashboardStats();
            renderRequests();

            // Show recent requests on dashboard
            function updateRecentRequests() {
                const recentContainer = document.getElementById('recentRequests');
                if (!recentContainer) return;

                if (APP_STATE.requests.length === 0) {
                    recentContainer.innerHTML = '<p style="color: var(--light-gray);">No recent requests</p>';
                    return;
                }

                const recent = APP_STATE.requests.slice(0, 5);
                recentContainer.innerHTML = recent.map(req => `
                    <div style="padding: 12px; border-bottom: 1px solid var(--border-gray); cursor: pointer;" onclick="editRequest('${req.id}')">
                        <div style="font-weight: 500; margin-bottom: 4px;">${req.title || 'Untitled'}</div>
                        <div style="font-size: 0.85rem; color: var(--light-gray);">
                            ${req.patronEmail || 'No patron'} • 
                            <span class="status-badge ${req.status || 'order'}">${req.status || 'order'}</span> • 
                            ${new Date(req.created).toLocaleDateString()}
                        </div>
                    </div>
                `).join('');
            }

            updateRecentRequests();

            // Update recent requests when requests change
            const originalSaveRequest = saveRequest;
            window.saveRequest = function(requestData) {
                const result = originalSaveRequest(requestData);
                updateRecentRequests();
                return result;
            };

            console.log('SilentStacks v2.0 - Complete ILL Management System with Enrichment Pipeline initialized');
            announceToScreenReader('SilentStacks application loaded with enrichment capabilities');

            // Demo data notice
            if (APP_STATE.requests.length === 0) {
                setTimeout(() => {
                    announceToScreenReader('Try demo PMID 18539917 or 23842776 to see enrichment in action');
                }, 2000);
            }
        });
    </script>
</body>
</html>